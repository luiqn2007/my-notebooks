{"ID":"20240513180507-ucol9hp","Spec":"1","Type":"NodeDocument","Properties":{"icon":"minecraft.ico","id":"20240513180507-ucol9hp","title":"Traversable","type":"doc","updated":"20240513180515"},"Children":[{"ID":"20240513180515-ioxdlt4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240513180515-ioxdlt4","updated":"20240513180515"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public interface Traversable\u003cT extends K1, C,  Mu extends Traversable.Mu\u003e extends Functor\u003cT, Mu\u003e {\n    interface Mu extends Functor.Mu, Traversable.Mu {}\n  \n    \u003cF extends K1, A, B\u003e App\u003cF, App\u003cT, B\u003e\u003e traverse(Applicative\u003cF, ?\u003e applicative, Function\u003cA, App\u003cF, B\u003e\u003e function, App\u003cT, A\u003e input);\n\n    default \u003cF extends K1, A\u003e App\u003cF, App\u003cT, A\u003e\u003e flip(Applicative\u003cF, ?\u003e applicative, App\u003cT, App\u003cF, A\u003e\u003e input);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513180515-cmby8r0","Type":"NodeParagraph","Properties":{"id":"20240513180515-cmby8r0","updated":"20240513180515"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Traversable"},{"Type":"NodeText","Data":"​ 接口描述这么一种行为："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"traverse"},{"Type":"NodeText","Data":"​，对输入容器的数据进行操作（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"flatMap"},{"Type":"NodeText","Data":"​）后，将重新装箱的结果再装箱，返回的是双层 App。当 A 也是一个容器时，该方法可以用于变换外部容器类型。"}]},{"ID":"20240513180515-brgvf3r","Type":"NodeParagraph","Properties":{"id":"20240513180515-brgvf3r","updated":"20240513180515"},"Children":[{"Type":"NodeText","Data":"另外一个方法 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"flip"},{"Type":"NodeText","Data":"​ 是一个特例，保持内部元素不变，交换外部容器类型。"}]}]}
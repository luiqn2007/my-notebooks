{"ID":"20240513180403-dlk3oct","Spec":"1","Type":"NodeDocument","Properties":{"icon":"minecraft.ico","id":"20240513180403-dlk3oct","title":"Functor 与 Kind","type":"doc","updated":"20240513180431"},"Children":[{"ID":"20240513180431-srm840d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240513180431-srm840d","updated":"20240513180431"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public interface Functor\u003cF extends K1, Mu extends Functor.Mu\u003e extends Kind1\u003cF, Mu\u003e {\n    interface Mu extends Kind1.Mu {}\n    \u003cT, R\u003e App\u003cF, R\u003e map(Function\u003cT, R\u003e func, App\u003cF, T\u003e ts);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513180431-ehlajjr","Type":"NodeParagraph","Properties":{"id":"20240513180431-ehlajjr","updated":"20240513180431"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Functor"},{"Type":"NodeText","Data":"​ 意为函子，定义了一个方法 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"map"},{"Type":"NodeText","Data":"​，通过一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Function"},{"Type":"NodeText","Data":"​ 根据一个容器中的数据创建新数据，并将新数据打包返回。"}]},{"ID":"20240513180431-jrpkhyj","Type":"NodeParagraph","Properties":{"id":"20240513180431-jrpkhyj","updated":"20240513180431"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"可以说，"},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"Functor"},{"Type":"NodeText","Data":"​ "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"是整个 DFU 实现数据变换工作的核心接口"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240513180431-9tr142y","Type":"NodeParagraph","Properties":{"id":"20240513180431-9tr142y","updated":"20240513180431"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Functor"},{"Type":"NodeText","Data":"​ 两个泛型 F 和 Mu 分别表示操作的容器类型和算子本身类型。"}]},{"ID":"20240513180431-awh13ts","Type":"NodeParagraph","Properties":{"id":"20240513180431-awh13ts","updated":"20240513180431"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Functor"},{"Type":"NodeText","Data":"​ 继承自 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Kind1"},{"Type":"NodeText","Data":"​，而 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Kind1"},{"Type":"NodeText","Data":"​ 继承自 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"App\u0026lt;Mu, F\u0026gt;"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Kind1"},{"Type":"NodeText","Data":"​ 的子接口只有 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Functor"},{"Type":"NodeText","Data":"​。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Kind1"},{"Type":"NodeText","Data":"​ 实现了一系列方法创建 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Product"},{"Type":"NodeText","Data":"​ 对象，可用于进一步的对象变换。"}]}]}
{"ID":"20240426021806-ytu7wkw","Spec":"1","Type":"NodeDocument","Properties":{"icon":"spring.png","id":"20240426021806-ytu7wkw","title":"异步处理","type":"doc","updated":"20240426093639"},"Children":[{"ID":"20240426021806-yxkrblx","Type":"NodeParagraph","Properties":{"id":"20240426021806-yxkrblx","updated":"20240426022037"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"@RequestMapping"},{"Type":"NodeText","Data":"​ 参数修饰的方法返回一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Callable"},{"Type":"NodeText","Data":"​ 或 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DeferredResult"},{"Type":"NodeText","Data":"​ 时，Spring 负责在一个应用程序线程（非 Servlet 线程）处理并返回其运算结果。"}]},{"ID":"20240426022301-ewh5mvk","Type":"NodeParagraph","Properties":{"id":"20240426022301-ewh5mvk","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240426022538"},"Children":[{"Type":"NodeText","Data":"默认 Spring 开启异步请求处理。可以通过以下方法设置：\n​"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;servlet\u0026gt;\u0026lt;async-support\u0026gt;true or false\u0026lt;/async-support\u0026gt;\u0026lt;/servlet\u0026gt;"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​\n​"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"AbstractAnnotationConfigDispatcherServletInitlizer#isAsyncSupport() -\u0026gt; true or false"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240426085613-esf3v79","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240426085613-esf3v79","updated":"20240426085617"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@GetMapping(path = \"/list_async\")\npublic Callable\u003cModelAndView\u003e listFixedDepositsAsync() {\n    return () -\u003e {\n        Thread.sleep(5000);\n        Map\u003cString, Object\u003e modelData = new HashMap\u003c\u003e();\n        modelData.put(\"fdList\", fixedDepositService.getFixedDeposits());\n        return new ModelAndView(\"fixedDeposit/list\", modelData);\n    };\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240426085620-n9gzkcz","Type":"NodeParagraph","Properties":{"id":"20240426085620-n9gzkcz","updated":"20240426090203"},"Children":[{"Type":"NodeText","Data":"还可以返回 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DeferredResult\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 手动管理异步调用。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DeferredResult\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 表示一个异步调用的结果，通常放在一个容器中，使用"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240408032543-n080u58","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"任务"},{"Type":"NodeText","Data":"或其他方式在一个单独的线程中执行。"}]},{"ID":"20240426092430-r5je1mz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240426092430-r5je1mz","updated":"20240426092646"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 这是一个存储了异步上下文的对象\n@Getter\npublic class ResultContext\u003cT\u003e {\n\n    // 用于判断执行方法\n    private final String methodToInvoke;\n    private final Map\u003cString, Object\u003e params = new HashMap\u003c\u003e();\n    // 用于存储执行结果\n    private final DeferredResult\u003cT\u003e result = new DeferredResult\u003c\u003e();\n\n    public ResultContext(String methodToInvoke) {\n        this.methodToInvoke = methodToInvoke;\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240426092819-w21tmh9","Type":"NodeParagraph","Properties":{"id":"20240426092819-w21tmh9","updated":"20240426093052"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ResultContext\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setResult"},{"Type":"NodeText","Data":"​ 方法设置执行结果，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setErrorResult"},{"Type":"NodeText","Data":"​ 设置异常信息，存在异常将交于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handleException"},{"Type":"NodeText","Data":"​ 处理。"}]},{"ID":"20240426090220-abwl4kv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240426090220-abwl4kv","updated":"20240426092736"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"private static final String LIST_METHOD = \"getFixedDepositList\";\nprivate final Queue\u003cResultContext\u003c?\u003e\u003e deferredResultQueue = new ConcurrentLinkedQueue\u003c\u003e();\n\n@GetMapping(path = \"/list2\")\npublic DeferredResult\u003cResponseEntity\u003cList\u003cFixedDepositDetails\u003e\u003e\u003e listFixedDeposits2() {\n    ResultContext\u003cResponseEntity\u003cList\u003cFixedDepositDetails\u003e\u003e\u003e context = new ResultContext\u003c\u003e(LIST_METHOD);\n    deferredResultQueue.add(context);\n    return context.getResult();\n}\n\n// 设置任务执行计划\n@Scheduled(fixedRate = 1000)\npublic void processResults() {\n    while (!deferredResultQueue.isEmpty()) {\n        ResultContext\u003c?\u003e context = deferredResultQueue.poll();\n        switch (context.getMethodToInvoke()) {\n            case LIST_METHOD:\n                var result = (DeferredResult\u003cResponseEntity\u003cList\u003cFixedDepositDetails\u003e\u003e\u003e) context.getResult();\n                List\u003cFixedDepositDetails\u003e fixedDeposits = fixedDepositService.getFixedDeposits();\n                var response = new ResponseEntity\u003c\u003e(fixedDeposits, HttpStatus.OK);\n                result.setResult(response);\n                break;\n            // ...\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240426092814-qo8ublf","Type":"NodeParagraph","Properties":{"id":"20240426092814-qo8ublf","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240426093630"},"Children":[{"Type":"NodeText","Data":"可使用 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;mvc:async-support default-timeout=xxx\u0026gt;"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 设置超时时间，注解配置在 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"WebMvcConfigurer#configureAsyncSupport"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 中设置"}]},{"ID":"20240426093537-nh6hyi9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240426093537-nh6hyi9","updated":"20240426093639"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@Configuration\npublic class WebConfigurer implements WebMvcConfigurer {\n\n    @Override\n    public void configureAsyncSupport(AsyncSupportConfigurer configurer) {\n        configurer.setDefaultTimeout(10000);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}
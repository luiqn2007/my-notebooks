{"ID":"20240320015029-slts4fq","Spec":"1","Type":"NodeDocument","Properties":{"icon":"jclasslib256x256.png","id":"20240320015029-slts4fq","title":"cglib","type":"doc","updated":"20240320024924"},"Children":[{"ID":"20240320015134-t73l9wl","Type":"NodeBlockquote","Properties":{"id":"20240320015134-t73l9wl","updated":"20240320015140"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240320015134-mie841o","Type":"NodeParagraph","Properties":{"id":"20240320015134-mie841o","updated":"20240320015140"},"Children":[{"Type":"NodeText","Data":"ASM 是字节码改写的事实标准，cglib 是动态代理的事实标准"}]}]},{"ID":"20240320015140-9glfo8t","Type":"NodeParagraph","Properties":{"id":"20240320015140-9glfo8t","updated":"20240320015159"},"Children":[{"Type":"NodeText","Data":"cglib 被各类库和框架广泛使用："}]},{"ID":"20240320015159-l7so1mc","Type":"NodeList","ListData":{},"Properties":{"id":"20240320015159-l7so1mc","updated":"20240320015250"},"Children":[{"ID":"20240320015200-5xbducz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240320015200-5xbducz","updated":"20240320015200"},"Children":[{"ID":"20240320015200-uqs5h7a","Type":"NodeParagraph","Properties":{"id":"20240320015200-uqs5h7a","updated":"20240320015212"},"Children":[{"Type":"NodeText","Data":"Spring：为 AOP 框架提供方法拦截"}]}]},{"ID":"20240320015212-lk9u28i","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240320015212-lk9u28i"},"Children":[{"ID":"20240320015212-kwm0mgj","Type":"NodeParagraph","Properties":{"id":"20240320015212-kwm0mgj","updated":"20240320015228"},"Children":[{"Type":"NodeText","Data":"MyBatis：生成 Mapper 接口的动态代理实现类"}]}]},{"ID":"20240320015228-stfcj6c","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240320015228-stfcj6c"},"Children":[{"ID":"20240320015228-vi3lxtv","Type":"NodeParagraph","Properties":{"id":"20240320015228-vi3lxtv","updated":"20240320015240"},"Children":[{"Type":"NodeText","Data":"Hibernate：生成持久化相关类"}]}]},{"ID":"20240320015240-n63p5cv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240320015240-n63p5cv","updated":"20240320015250"},"Children":[{"ID":"20240320015240-rsxh0r6","Type":"NodeParagraph","Properties":{"id":"20240320015240-rsxh0r6","updated":"20240320015250"},"Children":[{"Type":"NodeText","Data":"Guice，EasyMock，jMock 等"}]}]}]},{"ID":"20240320022817-zyofqok","Type":"NodeParagraph","Properties":{"id":"20240320022817-zyofqok","updated":"20240320022817"},"Children":[{"Type":"NodeText","Data":"使用 cglib 动态代理的步骤如下："}]},{"ID":"20240320022817-z4pto22","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240320022817-z4pto22","updated":"20240320022817"},"Children":[{"ID":"20240320022817-txo74hj","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240320022817-txo74hj","updated":"20240320022817"},"Children":[{"ID":"20240320022817-lhsxft1","Type":"NodeParagraph","Properties":{"id":"20240320022817-lhsxft1","updated":"20240320022817"},"Children":[{"Type":"NodeText","Data":"实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MethodInterceptor"},{"Type":"NodeText","Data":"​ 接口的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"intercept"},{"Type":"NodeText","Data":"​ 方法，实现拦截逻辑"}]}]},{"ID":"20240320022817-66gm7ca","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240320022817-66gm7ca","updated":"20240320022817"},"Children":[{"ID":"20240320022817-e7shgmj","Type":"NodeParagraph","Properties":{"id":"20240320022817-e7shgmj","updated":"20240320022817"},"Children":[{"Type":"NodeText","Data":"调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Enhancer.create"},{"Type":"NodeText","Data":"​ 方法生成目标代理类的子类实例"}]}]},{"ID":"20240320022817-gb2nm2g","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240320022817-gb2nm2g","updated":"20240320022817"},"Children":[{"ID":"20240320022817-791g48g","Type":"NodeParagraph","Properties":{"id":"20240320022817-791g48g","updated":"20240320022817"},"Children":[{"Type":"NodeText","Data":"通过代理类实例调用目标方法"}]}]}]},{"ID":"20240320022817-a013c2f","Type":"NodeParagraph","Properties":{"id":"20240320022817-a013c2f","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240320022817"},"Children":[{"Type":"NodeText","Data":"Java9+ 需要增加以下参数："},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"--add-opens java.base/java.lang=ALL-UNNAMED"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 允许未命名模块访问 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"java.lang"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 包中的 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"defineClass"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 方法"}]},{"ID":"20240320022817-x7achx1","Type":"NodeSuperBlock","Properties":{"id":"20240320022817-x7achx1","updated":"20240320022921"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240320022817-r8xuq4v","Type":"NodeSuperBlock","Properties":{"id":"20240320022817-r8xuq4v","updated":"20240320022921"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"row"},{"ID":"20240320022817-8d3kyz6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240320022817-8d3kyz6","updated":"20240320022921"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"package org.example.cglib;\n\npublic class Person {\n    public void doJob(String name) {\n        System.out.println(\"The class is \" + getClass().getName());\n        System.out.println(\"Doing job:\" + name);\n    }\n\n    public void eat() {}\n\n    public void sleep() {}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240320022817-dvljs84","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240320022817-dvljs84","updated":"20240320022817"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"\u003e\u003e\u003e\u003e before intercept\nThe class is org.example.cglib.Person$$EnhancerByCGLIB$$2b765f74\nDoing job:coding\n\u003e\u003e\u003e\u003e end intercept\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240320022817-3z2b91h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240320022817-3z2b91h","updated":"20240320022817"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public static void main(String[] args) {\n    // 1. 实现一个 MethodInterceptor 接口，用于拦截代理方法\n    MethodInterceptor interceptor = (obj, method, objects, methodProxy) -\u003e {\n        System.out.println(\"\u003e\u003e\u003e\u003e before intercept\");\n        // 这里调用原对象方法\n        Object o = methodProxy.invokeSuper(obj, objects);\n        System.out.println(\"\u003e\u003e\u003e\u003e end intercept\");\n        return o;\n    };\n    // 2. 生成 Person 类子类实例\n    Person person = (Person) Enhancer.create(Person.class, interceptor);\n    // 3. 调用目标方法\n    person.doJob(\"coding\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240320022817-knp2vlf","Type":"NodeWidget","Data":"\u003ciframe src=\"/widgets/widget-excalidraw/\" data-src=\"/widgets/widget-excalidraw/\" data-subtype=\"widget\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"width: 1159px; height: 305px;\"\u003e\u003c/iframe\u003e","Properties":{"custom-data-assets":"assets/widget-excalidraw/0-20240320021541-besxoc6","custom-options":"\u0026#123;\u0026quot;gridModeEnabled\u0026quot;:true,\u0026quot;exportBackground\u0026quot;:true,\u0026quot;theme\u0026quot;:\u0026quot;light\u0026quot;\u0026#125;","id":"20240320022817-knp2vlf","updated":"20240320022817"}},{"ID":"20240320022817-wfwcppx","Type":"NodeParagraph","Properties":{"id":"20240320022817-wfwcppx","updated":"20240320022817"},"Children":[{"Type":"NodeText","Data":"cglib 通过生成子类方式产生动态代理，可以通过设置将生成的类保存到磁盘中"}]},{"ID":"20240320022817-d18guoy","Type":"NodeSuperBlock","Properties":{"id":"20240320022817-d18guoy","updated":"20240320022817"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240320022817-8nv5ffc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240320022817-8nv5ffc","updated":"20240320022817"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, \"./out/cglib-debug-location\");\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240320022817-58e4enr","Type":"NodeParagraph","Properties":{"id":"20240320022817-58e4enr","updated":"20240320022817"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240320022009-bfcjwu4.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240320022817-qvd82u8","Type":"NodeParagraph","Properties":{"id":"20240320022817-qvd82u8","updated":"20240320022817"},"Children":[{"Type":"NodeText","Data":"名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Person$$EnhancerByCGLIB$$xxxxxxxx"},{"Type":"NodeText","Data":"​ 类即生成的子类，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"this.CGLIB$CALLBACK_0"},{"Type":"NodeText","Data":"​ 即创建的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MethodInterceptor"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240320022817-6ctbzkx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240320022817-6ctbzkx","updated":"20240320022817"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class Person$$EnhancerByCGLIB$$2b765f74 extends Person implements Factory {\n    // ...\n\n    public final void doJob(String var1) {\n        MethodInterceptor var10000 = this.CGLIB$CALLBACK_0;\n        if (var10000 == null) {\n            CGLIB$BIND_CALLBACKS(this);\n            var10000 = this.CGLIB$CALLBACK_0;\n        }\n\n        if (var10000 != null) {\n            var10000.intercept(this, CGLIB$doJob$0$Method, new Object[]{var1}, CGLIB$doJob$0$Proxy);\n        } else {\n            super.doJob(var1);\n        }\n    }\n\n\n    // ...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240320022817-8sj01ox","Type":"NodeParagraph","Properties":{"id":"20240320022817-8sj01ox","updated":"20240320024705"},"Children":[{"Type":"NodeText","Data":"为避免调用反射拦截方法，cglib 为动态代理生成各自的 FastClass 类存于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MethodProxy"},{"Type":"NodeText","Data":"​ 中，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"switch"},{"Type":"NodeText","Data":"​ 记录方法索引，根据索引调用各自的方法："}]},{"ID":"20240320023426-6ahu6x8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240320023426-6ahu6x8","updated":"20240320024924"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class Person$$FastClassByCGLIB$$756b1530 extends FastClass {\n    // 根据方法签名获取方法的索引\n    public int getIndex(Signature var1) {\n        return switch (var1.toString()) {\n            case \"sleep()V\" -\u003e 3;\n            case \"eat()V\" -\u003e 1;\n            case \"doJob(Ljava/lang/String;)V\" -\u003e 0;\n            case \"main([Ljava/lang/String;)V\" -\u003e 2;\n            case \"equals(Ljava/lang/Object;)Z\" -\u003e 4;\n            case \"toString()Ljava/lang/String;\" -\u003e 5;\n            case \"hashCode()I\" -\u003e 6;\n            default -\u003e -1;\n        };\n    }\n\n    // 根据方法名称、形参类型获取方法的索引\n    public int getIndex(String var1, Class[] var2) {\n        switch (var1) {\n            case \"toString\":\n                switch (var2.length) {\n                    case 0: return 5;\n                }\n                break;\n            case \"equals\":\n                switch (var2.length) {\n                    case 1: if (var2[0].getName().equals(\"java.lang.Object\")) return 4;\n                }\n                break;\n            case \"eat\":\n                switch (var2.length) {\n                    case 0: return 1;\n                }\n                break;\n            case \"main\":\n                switch (var2.length) {\n                    case 1: if (var2[0].getName().equals(\"[Ljava.lang.String;\")) return 2;\n                }\n                break;\n            case \"doJob\":\n                switch (var2.length) {\n                    case 1: if (var2[0].getName().equals(\"java.lang.String\")) return 0;\n                }\n                break;\n            case \"sleep\":\n                switch (var2.length) {\n                    case 0: return 3;\n                }\n                break;\n            case \"hashCode\":\n                switch (var2.length) {\n                    case 0: return 6;\n                }\n        }\n\n        return -1;\n    }\n\n    // 通过索引避免反射\n    public Object invoke(int var1, Object var2, Object[] var3) throws InvocationTargetException {\n        Person var10000 = (Person) var2;\n        try {\n            switch (var1) {\n                case 0:\n                    var10000.doJob((String) var3[0]);\n                    return null;\n                case 1:\n                    var10000.eat();\n                    return null;\n                case 2:\n                    Person.main((String[]) var3[0]);\n                    return null;\n                case 3:\n                    var10000.sleep();\n                    return null;\n                case 4:\n                    return var10000.equals(var3[0]);\n                case 5:\n                    return var10000.toString();\n                case 6:\n                    return var10000.hashCode();\n            }\n        } catch (Throwable var4) {\n            throw new InvocationTargetException(var4);\n        }\n\n        throw new IllegalArgumentException(\"Cannot find matching method/constructor\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}
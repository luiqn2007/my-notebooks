{"ID":"20240319221629-6190jms","Spec":"1","Type":"NodeDocument","Properties":{"icon":"jclasslib256x256.png","id":"20240319221629-6190jms","title":"AST 操作 API","type":"doc","updated":"20240427153610"},"Children":[{"ID":"20240319221629-mpe11ea","Type":"NodeParagraph","Properties":{"id":"20240319221629-mpe11ea","updated":"20240319224242"},"Children":[{"Type":"NodeText","Data":"抽象语法树操作 API 主要有 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Names"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"JCTree"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TreeMaker"},{"Type":"NodeText","Data":"​ 三部分（仅用于 Java8，Java9+ 应使用其他方法创建 Java 文件）"}]},{"ID":"20240319222700-8qyq3vr","Type":"NodeList","ListData":{},"Properties":{"id":"20240319222700-8qyq3vr","updated":"20240319224152"},"Children":[{"ID":"20240319222701-zn27akb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240319222701-zn27akb","updated":"20240319224106"},"Children":[{"ID":"20240319222701-5qf0okc","Type":"NodeParagraph","Properties":{"id":"20240319222701-5qf0okc","updated":"20240319224106"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code block-ref","TextMarkBlockRefID":"20240319224041-4jydvj3","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"Names"},{"Type":"NodeText","Data":"​：提供了访问标识符的方法"}]}]},{"ID":"20240319222733-tkky324","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240319222733-tkky324","updated":"20240319224126"},"Children":[{"ID":"20240319222733-ozwz0gg","Type":"NodeParagraph","Properties":{"id":"20240319222733-ozwz0gg","updated":"20240319224126"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code block-ref","TextMarkBlockRefID":"20240319224114-3frfr2g","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"JCTree"},{"Type":"NodeText","Data":"​：表示一个语法树元素，是语法树元素的基类"}]}]},{"ID":"20240319222749-rwh4wgi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240319222749-rwh4wgi","updated":"20240319224152"},"Children":[{"ID":"20240319222749-x0lu1p7","Type":"NodeParagraph","Properties":{"id":"20240319222749-x0lu1p7","updated":"20240319224152"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code block-ref","TextMarkBlockRefID":"20240319224130-4amg0e6","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"TreeMaker"},{"Type":"NodeText","Data":"​：封装创建语法树的节点方法"}]}]}]},{"ID":"20240319224040-1k975c0","Type":"NodeParagraph","Properties":{"id":"20240319224040-1k975c0","updated":"20240320014839"},"Children":[{"Type":"NodeText","Data":"例：模仿 Lombol 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"@Data"},{"Type":"NodeText","Data":"​ 注解，生成 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"getter"},{"Type":"NodeText","Data":"​ 与 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"setter"},{"Type":"NodeText","Data":"​ 方法。"}]},{"ID":"20240320003704-t5v7276","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240320003704-t5v7276","updated":"20240320005658"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@Retention(RetentionPolicy.CLASS)\n@Target({ElementType.TYPE})\npublic @interface TestAnno {\n}\n\npackage org.example.jsr269;\n\nimport com.sun.source.tree.Tree;\nimport com.sun.tools.javac.api.JavacTrees;\nimport com.sun.tools.javac.code.Flags;\nimport com.sun.tools.javac.code.Type;\nimport com.sun.tools.javac.processing.JavacProcessingEnvironment;\nimport com.sun.tools.javac.tree.JCTree;\nimport com.sun.tools.javac.tree.TreeMaker;\nimport com.sun.tools.javac.tree.TreeTranslator;\nimport com.sun.tools.javac.util.*;\n\nimport javax.annotation.processing.*;\nimport javax.lang.model.SourceVersion;\nimport javax.lang.model.element.TypeElement;\nimport java.util.Set;\n\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\n@SupportedAnnotationTypes(\"org.example.jsr269.Data\")\npublic class TestAnnotationProcessor extends AbstractProcessor {\n\n    private JavacTrees javacTrees;\n    private TreeMaker treeMaker;\n    private Names names;\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n        javacTrees = JavacTrees.instance(context);\n        treeMaker = TreeMaker.instance(context);\n        names = Names.instance(context);\n    }\n\n    @Override\n    public boolean process(Set\u003c? extends TypeElement\u003e annotations, RoundEnvironment roundEnv) {\n        // do something\n        roundEnv.getElementsAnnotatedWith(Data.class).forEach(element -\u003e {\n            JCTree tree = javacTrees.getTree(element);\n            tree.accept(new TreeTranslator() {\n                @Override\n                public void visitClassDef(JCTree.JCClassDecl classDecl) {\n                    classDecl.defs.stream()\n                            .filter(it -\u003e it.getKind().equals(Tree.Kind.VARIABLE))\n                            .map(it -\u003e (JCTree.JCVariableDecl) it)\n                            .forEach(it -\u003e \n                                    classDecl.defs = classDecl.defs.prepend(genGetterMethod(it)).prepend(genSetterMethod(it)));\n                    super.visitClassDef(classDecl);\n                }\n            });\n        });\n        return true;\n    }\n  \n    private JCTree.JCMethodDecl genGetterMethod(JCTree.JCVariableDecl field) {\n        // return this.xxx\n        JCTree.JCReturn jcReturn = treeMaker.Return(treeMaker.Select(\n                treeMaker.Ident(names.fromString(\"this\")),\n                field.sym));\n        ListBuffer\u003cJCTree.JCStatement\u003e listBuffer = new ListBuffer\u003c\u003e();\n        listBuffer.append(jcReturn);\n      \n        // 修饰符\n        JCTree.JCModifiers modifier = treeMaker.Modifiers(Flags.PUBLIC);\n        // 方法名\n        char f = field.name.toString().charAt(0);\n        if (Character.isLowerCase(f)) f = Character.toUpperCase(f);\n        Name name = names.fromString(\"get\" + f + field.name.toString().substring(1));\n        // 返回值类型\n        JCTree.JCExpression returnType = field.vartype;\n        // 方法体\n        JCTree.JCBlock body = treeMaker.Block(0, listBuffer.toList());\n        // 泛型列表\n        List\u003cJCTree.JCTypeParameter\u003e genericList = List.nil();\n        // 参数值\n        List\u003cJCTree.JCVariableDecl\u003e params = List.nil();\n        // 异常列表\n        List\u003cJCTree.JCExpression\u003e thrown = List.nil();\n      \n        return treeMaker.MethodDef(modifier, name, returnType, genericList, params, thrown, body, null);\n    }\n  \n    private JCTree.JCMethodDecl genSetterMethod(JCTree.JCVariableDecl field) {\n        // return this.xxx = xxx\n        JCTree.JCVariableDecl decl = treeMaker.VarDef(\n                treeMaker.Modifiers(Flags.PARAMETER, List.nil()),\n                field.getName(), field.vartype, null);\n        ListBuffer\u003cJCTree.JCStatement\u003e listBuffer = new ListBuffer\u003c\u003e();\n        listBuffer.append(decl);\n\n        // 修饰符\n        JCTree.JCModifiers modifier = treeMaker.Modifiers(Flags.PUBLIC);\n        // 方法名\n        char f = field.name.toString().charAt(0);\n        if (Character.isLowerCase(f)) f = Character.toUpperCase(f);\n        Name name = names.fromString(\"set\" + f + field.name.toString().substring(1));\n        // 返回值类型\n        JCTree.JCExpression returnType = treeMaker.Type(new Type.JCVoidType());\n        // 方法体\n        JCTree.JCBlock body = treeMaker.Block(0, listBuffer.toList());\n        // 泛型列表\n        List\u003cJCTree.JCTypeParameter\u003e genericList = List.nil();\n        // 参数值\n        List\u003cJCTree.JCVariableDecl\u003e params = List.of(field);\n        // 异常列表\n        List\u003cJCTree.JCExpression\u003e thrown = List.nil();\n\n        return treeMaker.MethodDef(modifier, name, returnType, genericList, params, thrown, body, null);\n    }\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240320005753-kkmlm1b","Type":"NodeParagraph","Properties":{"id":"20240320005753-kkmlm1b","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240427153610"},"Children":[{"Type":"NodeText","Data":"使用时，应先编译注解处理器，再利用注解处理器编译类"}]},{"ID":"20240320005836-66w4ejz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240320005836-66w4ejz","updated":"20240320010050"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"javac -cp /{jdk_path}/lib/tools.jar 注解处理器路径 -d ./out\njavac -cp ./out -d out -processor 注解处理器全类名 源码.......路径 \n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}
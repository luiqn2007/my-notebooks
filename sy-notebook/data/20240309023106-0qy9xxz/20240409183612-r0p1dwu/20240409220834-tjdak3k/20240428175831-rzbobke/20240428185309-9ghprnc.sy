{"ID":"20240428185309-9ghprnc","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f980","id":"20240428185309-9ghprnc","title":"异步任务 Future","type":"doc","updated":"20240428203533"},"Children":[{"ID":"20240428185309-sp7b6cb","Type":"NodeParagraph","Properties":{"id":"20240428185309-sp7b6cb","updated":"20240428185326"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":"​ 代表一个能产出值的异步计算，产生后需要通过执行器 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"executor"},{"Type":"NodeText","Data":"​ 执行"}]},{"ID":"20240428185420-pdisow7","Type":"NodeParagraph","Properties":{"id":"20240428185420-pdisow7","style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);","updated":"20240428185626"},"Children":[{"Type":"NodeText","Data":"Rust 实现的 Future 实现 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"Pin"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​，表示数据指向的可变引用的内存地址是不变的"}]},{"ID":"20240428190510-rsmjzae","Type":"NodeParagraph","Properties":{"id":"20240428190510-rsmjzae","updated":"20240428191432"},"Children":[{"Type":"NodeText","Data":"一个简单的 Future 实现计时功能如下："}]},{"ID":"20240428190530-4bnglhk","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240428190530-4bnglhk","updated":"20240428203533"},"Children":[{"ID":"20240428191313-tww3e6b","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240428191313-tww3e6b","updated":"20240428191313"},"Children":[{"ID":"20240428191313-cfgtgca","Type":"NodeParagraph","Properties":{"id":"20240428191313-cfgtgca","updated":"20240428191313"},"Children":[{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SharedState"},{"Type":"NodeText","Data":"​ 用于记录任务状态，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"completed"},{"Type":"NodeText","Data":"​ 表示任务是否完成"}]},{"ID":"20240428191250-ef97ahl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240428191250-ef97ahl","updated":"20240428191253"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"struct SharedState {\n    completed: bool,\n    waker: Option\u003cWaker\u003e\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240428191341-addt585","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240428191341-addt585","updated":"20240428203533"},"Children":[{"ID":"20240428191341-jmfwep4","Type":"NodeParagraph","Properties":{"id":"20240428191341-jmfwep4","updated":"20240428191403"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Future"},{"Type":"NodeText","Data":"​ 实现类中持有一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"shared_state"},{"Type":"NodeText","Data":"​ 以便检查"}]},{"ID":"20240428203449-mke6lvt","Type":"NodeParagraph","Properties":{"id":"20240428203449-mke6lvt","style":"color: var(--b3-card-error-color);background-color: var(--b3-card-error-background);","updated":"20240428203533"},"Children":[{"Type":"NodeText","Data":"当执行器是多线程执行器时，应使用 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-error-color);background-color: var(--b3-card-error-background);"},"TextMarkType":"code","TextMarkTextContent":"futures::lock"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-error-color);background-color: var(--b3-card-error-background);\"}"},{"Type":"NodeText","Data":"​ 替代 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-error-color);background-color: var(--b3-card-error-background);"},"TextMarkType":"code","TextMarkTextContent":"Mutex"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-error-color);background-color: var(--b3-card-error-background);\"}"},{"Type":"NodeText","Data":"​ 防止线程池死锁"}]},{"ID":"20240428191403-puxa6fk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240428191403-puxa6fk","updated":"20240428191411"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"pub struct TimeFuture {\n    shared_state: Arc\u003cMutex\u003cSharedState\u003e\u003e\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240428191415-73u9r4b","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240428191415-73u9r4b","updated":"20240428192335"},"Children":[{"ID":"20240428191415-z72s8o3","Type":"NodeParagraph","Properties":{"id":"20240428191415-z72s8o3","updated":"20240428191839"},"Children":[{"Type":"NodeText","Data":"实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"new"},{"Type":"NodeText","Data":"​ 方法，新开一个线程作为计时器，并在必要的时候调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Waker"},{"Type":"NodeText","Data":"​ 唤醒任务"}]},{"ID":"20240428192207-lcbhc63","Type":"NodeParagraph","Properties":{"id":"20240428192207-lcbhc63","style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);","updated":"20240428192335"},"Children":[{"Type":"NodeText","Data":"这里给出的实例中，只需要调用一次任务即可完成。实际情况下可能要多次调用线程中的代码才能完成"}]},{"ID":"20240428191839-5bqydqm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240428191839-5bqydqm","updated":"20240428191938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"impl TimeFuture {\n    pub fn new(duration: Duration) -\u003e TimeFuture {\n        let shared_state = Arc::new(Mutex::new(SharedState {\n            completed: false,\n            waker: None,\n        }));\n        let thread_state = shared_state.clone();\n        thread::spawn(move || {\n            // 通过 sleep 计时\n            thread::sleep(duration);\n            let mut shared_state = thread_state.lock().unwrap();\n            shared_state.completed = true;\n            // 如果必要的话调用 waker\n            if let Some(waker) = shared_state.waker.take() {\n                waker.wake();\n            }\n        });\n\n        TimeFuture { shared_state }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240428191852-ychju57","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240428191852-ychju57","updated":"20240428192154"},"Children":[{"ID":"20240428191852-ynrb0em","Type":"NodeParagraph","Properties":{"id":"20240428191852-ynrb0em","updated":"20240428192154"},"Children":[{"Type":"NodeText","Data":"实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"poll"},{"Type":"NodeText","Data":"​ 方法，检查 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SharedState"},{"Type":"NodeText","Data":"​ 判断任务是否完成，未完成时向 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SharedState"},{"Type":"NodeText","Data":"​ 提供 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Waker"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240428191958-stoiin0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240428191958-stoiin0","updated":"20240428192115"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"impl Future for TimeFuture {\n    type Output = ();\n\n    fn poll(self: Pin\u003c\u0026mut Self\u003e, cx: \u0026mut Context\u003c'_\u003e) -\u003e Poll\u003cSelf::Output\u003e {\n        let mut shared_state = self.shared_state.lock().unwrap();\n        if shared_state.completed {\n            Poll::Ready(())\n        } else {\n            shared_state.waker = Some(cx.waker().clone());\n            Poll::Pending\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240428190521-zi2kzgd","Type":"NodeParagraph","Properties":{"id":"20240428190521-zi2kzgd"}}]}
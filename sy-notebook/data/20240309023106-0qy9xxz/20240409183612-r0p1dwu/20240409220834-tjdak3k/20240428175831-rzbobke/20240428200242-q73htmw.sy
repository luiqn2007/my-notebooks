{"ID":"20240428200242-q73htmw","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f980","id":"20240428200242-q73htmw","title":"Pin 与 Unpin","type":"doc","updated":"20240428202958"},"Children":[{"ID":"20240428200309-vm3gz2o","Type":"NodeParagraph","Properties":{"id":"20240428200309-vm3gz2o","updated":"20240428200543"},"Children":[{"Type":"NodeText","Data":"实现了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Unpin"},{"Type":"NodeText","Data":"​ 表示该结构在内存中可以安全移动，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pin"},{"Type":"NodeText","Data":"​ 表示该结构在内存中不能任意移动"}]},{"ID":"20240428200546-xdbhqin","Type":"NodeParagraph","Properties":{"id":"20240428200546-xdbhqin","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240428200603"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"Unpin"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 是一个 Trait，"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"Pin"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 是一个结构体"}]},{"ID":"20240428200708-x11838a","Type":"NodeParagraph","Properties":{"id":"20240428200708-x11838a","updated":"20240428200849"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pin"},{"Type":"NodeText","Data":"​ 结构体内包含一个指针。如果 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pin"},{"Type":"NodeText","Data":"​ 内指针指向的数据实现了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"!Unpin"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pin"},{"Type":"NodeText","Data":"​ 保证内部实现了的指针对应的数据不会被任意移动。"}]},{"ID":"20240428202422-dei6e6v","Type":"NodeParagraph","Properties":{"id":"20240428202422-dei6e6v","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240428202448"},"Children":[{"Type":"NodeText","Data":"可以使用 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"_marker: PhantomPinned"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 表示实现 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"!Pin"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240428201120-m3oyzmf","Type":"NodeParagraph","Properties":{"id":"20240428201120-m3oyzmf","updated":"20240428201143"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pin"},{"Type":"NodeText","Data":"​ 多用于自引用类型"}]},{"ID":"20240428201144-64j2p49","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240428201144-64j2p49","updated":"20240428202132"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"struct Test {\n    a: String,\n    b: *const String,\n}\n\nimpl Test {\n    fn new(text: \u0026str) {\n        Test { a: String::from(text), b: std::ptr::null(), }\n    }\n\n    fn init(\u0026mut self) {\n        let self_ref: *const String = \u0026self.a;\n        self.b = self_ref;\n    }\n\n    fn a(\u0026self) -\u003e \u0026str { \u0026self.a }\n    fn b(\u0026self) -\u003e \u0026String {unsafe{\u0026*(self.b)}}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240428202140-3aa09f7","Type":"NodeParagraph","Properties":{"id":"20240428202140-3aa09f7","updated":"20240428202150"},"Children":[{"Type":"NodeText","Data":"在没有 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pin"},{"Type":"NodeText","Data":"​ 的情况下交换："}]},{"ID":"20240428202132-rc0k60c","Type":"NodeSuperBlock","Properties":{"id":"20240428202132-rc0k60c","updated":"20240428202320"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240428202121-k3494tq","Type":"NodeParagraph","Properties":{"id":"20240428202121-k3494tq","updated":"20240428202132"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240428202121-as6wj51.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240428201220-9e2qzik","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240428201220-9e2qzik","updated":"20240428202320"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let mut test1 = Test::new::(\"test1\");\n    // a=\"test1\", b=\"test1\"\n    test1.init();\n    let mut test2 = Test::new::(\"test2\");\n    // a=\"test2\", b=\"test2\"\n    test2.init();\n\n    // 交换\n    std::mem::swap(\u0026mut test1, \u0026mut test2);\n  \n    // test1: a=\"test2\", b=\"test1\"\n    // test2: a=\"test1\", b=\"test2\"\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240428202133-buvhq8f","Type":"NodeParagraph","Properties":{"id":"20240428202133-buvhq8f","updated":"20240428202459"},"Children":[{"Type":"NodeText","Data":"实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Pin"},{"Type":"NodeText","Data":"​："}]},{"ID":"20240428202957-ju3cdwx","Type":"NodeSuperBlock","Properties":{"id":"20240428202957-ju3cdwx","updated":"20240428202958"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240428202459-g716a7f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240428202459-g716a7f","updated":"20240428202958"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"struct Test {\n    a: String,\n    b: *const String,\n    _marker: PhantomPined,\n}\n\nimpl Test {\n    fn new(text: \u0026str) {\n        Test { a: String::from(text), \n               b: std::ptr::null(), \n               // !Unpin 标记\n               _marker: PhantomPined,  }\n    }\n\n    fn init(self: Pin\u003c\u0026mut Self\u003e) {\n        let self_ref: *const String = \u0026self.a;\n        let this = unsafe { self.get_unchecked_mut() };\n        this.b = self_ptr;\n    }\n\n    fn a(self: Pin\u003c\u0026Self\u003e) -\u003e \u0026str { \u0026self.get_ref().a }\n    fn b(self: Pin\u003c\u0026Self\u003e) -\u003e \u0026String { unsafe{ \u0026*(self.b) } }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240428202646-uo6iglp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240428202646-uo6iglp","updated":"20240428202958"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let mut test1 = Test::new::(\"test1\");\n    // a=\"test1\", b=\"test1\"\n    test1.init();\n    let mut test2 = Test::new::(\"test2\");\n    // a=\"test2\", b=\"test2\"\n    test2.init();\n\n    // 错误：`PhantomPined` cannot be unpinned\n    std::mem::swap(\u0026mut test1, \u0026mut test2);\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]}]}
{"ID":"20240409194306-c2dc3jd","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f980","id":"20240409194306-c2dc3jd","title":"newtype 模式","type":"doc","updated":"20240428144605"},"Children":[{"ID":"20240409194312-0vdvo2o","Type":"NodeParagraph","Properties":{"id":"20240409194312-0vdvo2o","updated":"20240409194340"},"Children":[{"Type":"NodeText","Data":"要在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Vec\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 上实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Display"},{"Type":"NodeText","Data":"​ 是不允许的，因为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Vec\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Display"},{"Type":"NodeText","Data":"​ 都不在当前包中。"}]},{"ID":"20240409194312-xxdbxkp","Type":"NodeParagraph","Properties":{"id":"20240409194312-xxdbxkp","updated":"20240409194436"},"Children":[{"Type":"NodeText","Data":"若的确要实现，可使用元组结构体封装，因为元组结构体对于 crate 是本地的。为了可以在其上使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Vec\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 的方法，可实现 "},{"Type":"NodeTextMark","TextMarkType":"code block-ref","TextMarkBlockRefID":"20240409194427-7v57fm4","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"Deref"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240409194312-z2ofsay","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409194312-z2ofsay","updated":"20240409194312"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"use std::fmt;\nuse std::fmt::{format, Formatter, write};\nuse std::ops::Deref;\n\nstruct VecWrapper(Vec\u003cString\u003e);\n\nimpl fmt::Display for VecWrapper {\n    fn fmt(\u0026self, f: \u0026mut Formatter\u003c'_\u003e) -\u003e fmt::Result {\n        write!(f, \"[{}]\", self.0.join(\", \"))\n    }\n}\n\nimpl Deref for VecWrapper {\n    type Target = Vec\u003cString\u003e;\n\n    fn deref(\u0026self) -\u003e \u0026Self::Target {\n        \u0026self.0\n    }\n}\n\nfn main() {\n    let vec = vec![\"A\".to_string(), \"B\".to_string(), \"C\".to_string()];\n    let d = VecWrapper(vec);\n    println!(\"{}\", d);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}
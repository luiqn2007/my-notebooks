{"ID":"20240409183902-0vr0aco","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f980","id":"20240409183902-0vr0aco","title":"变量","type":"doc","updated":"20240409184744"},"Children":[{"ID":"20240409183917-rz34790","Type":"NodeParagraph","Properties":{"id":"20240409183917-rz34790","updated":"20240409183917"},"Children":[{"Type":"NodeText","Data":"Rust 使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"let"},{"Type":"NodeText","Data":"​ 定义一个不可变变量，Rust 更多的推荐使用不可变量，使代码更易于推导，不易出错。变量名推荐以 "},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"snake_case"},{"Type":"NodeText","Data":" 即小写字母+下划线构成。"}]},{"ID":"20240409183926-yxig1oq","Type":"NodeParagraph","Properties":{"id":"20240409183926-yxig1oq","style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);","updated":"20240409183929"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"println!"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​ 为一个宏调用，作用相当于输出一行文本到控制台"}]},{"ID":"20240409183933-vjt1p7s","Type":"NodeParagraph","Properties":{"id":"20240409183933-vjt1p7s","style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);","updated":"20240409183935"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);"},"TextMarkType":"code","TextMarkTextContent":"fn main() { /*...*/ }"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);\"}"},{"Type":"NodeText","Data":"​ 函数为入口函数"}]},{"ID":"20240409183917-b4zmj0u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409183917-b4zmj0u","updated":"20240409183917"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"let x = 5;\n// The value of x is 5\nprintln!(\"The value of x is {}\", x);\n// cannot assign twice to immutable variable\nx = 6;\nprintln!(\"The value of x is {}\", x);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409183917-6gt51lv","Type":"NodeParagraph","Properties":{"id":"20240409183917-6gt51lv","updated":"20240409183948"},"Children":[{"Type":"NodeText","Data":"Rust 也支持变量，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"let mut"},{"Type":"NodeText","Data":"​ 定义一个变量。"}]},{"ID":"20240409183917-grdrrgx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409183917-grdrrgx","updated":"20240409183917"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"let mulet mut x = 5;\n// The value of x is 5\nprintln!(\"The value of x is {}\", x);\nx = 6;\n// The value of x is 6\nprintln!(\"The value of x is {}\", x);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409183917-lftyro8","Type":"NodeParagraph","Properties":{"id":"20240409183917-lftyro8","updated":"20240409183917"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"const"},{"Type":"NodeText","Data":"​ 声明常量。常量总是不可变的，因此不存在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"mut"},{"Type":"NodeText","Data":"​ 修饰，必须显式指定数据类型，且值只能为常量表达式。"}]},{"ID":"20240409183917-z3fg0g2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409183917-z3fg0g2","updated":"20240409183917"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"const THREE_HOURS_TO_SECONDS: i32 = 3 * 60 * 60;\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409184217-rs8yrtl","Type":"NodeBlockquote","Properties":{"id":"20240409184217-rs8yrtl","updated":"20240409184744"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240409184230-ubw2rsq","Type":"NodeParagraph","Properties":{"id":"20240409184230-ubw2rsq","updated":"20240409184744"},"Children":[{"Type":"NodeText","Data":"不带 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"mut"},{"Type":"NodeText","Data":"​ 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"let"},{"Type":"NodeText","Data":"​ 与 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"const"},{"Type":"NodeText","Data":"​ 的区别："}]},{"ID":"20240409184239-41kmuuq","Type":"NodeList","ListData":{},"Properties":{"id":"20240409184239-41kmuuq","updated":"20240409184730"},"Children":[{"ID":"20240409184507-mgzzpw9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240409184507-mgzzpw9","updated":"20240409184507"},"Children":[{"ID":"20240409184507-8r0wsxu","Type":"NodeParagraph","Properties":{"id":"20240409184507-8r0wsxu","updated":"20240409184531"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"const"},{"Type":"NodeText","Data":"​ 是编译时常量，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"let"},{"Type":"NodeText","Data":"​ 是运行时不可变变量"}]}]},{"ID":"20240409184531-l1we38d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240409184531-l1we38d"},"Children":[{"ID":"20240409184531-g4wazam","Type":"NodeParagraph","Properties":{"id":"20240409184531-g4wazam","updated":"20240409184654"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"const"},{"Type":"NodeText","Data":"​ 的值总是内联的，即每个引用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"const"},{"Type":"NodeText","Data":"​ 的地方都会在编译时持有一份对象副本"}]}]},{"ID":"20240409184654-8kx8emo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240409184654-8kx8emo"},"Children":[{"ID":"20240409184654-0amqagq","Type":"NodeParagraph","Properties":{"id":"20240409184654-0amqagq","updated":"20240409184718"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"const"},{"Type":"NodeText","Data":"​ 必须有类型，不能自动推断"}]}]},{"ID":"20240409184719-d3p7mug","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240409184719-d3p7mug","updated":"20240409184730"},"Children":[{"ID":"20240409184719-jtkqrrn","Type":"NodeParagraph","Properties":{"id":"20240409184719-jtkqrrn","updated":"20240409184730"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"const"},{"Type":"NodeText","Data":"​ 的生命周期是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"'static"},{"Type":"NodeText","Data":"​ 的"}]}]}]}]},{"ID":"20240409183917-0rohxlm","Type":"NodeParagraph","Properties":{"id":"20240409183917-0rohxlm","updated":"20240409183917"},"Children":[{"Type":"NodeText","Data":"同一个作用域中可以定义同名变量，后声明的变量将覆盖先声明的。与 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"mut"},{"Type":"NodeText","Data":"​ 不同的是，因为实际上是新建了一个变量，允许变量类型不同"}]},{"ID":"20240409183917-eqxp6r6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409183917-eqxp6r6","updated":"20240409183917"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"let x = 5;\n// Value x is 5\nprintln!(\"Value x is {}\", x);\nlet x = x + 1; // shadowing!\n// Value x is 6\nprintln!(\"Value x is {}\", x);\n{\n    let x = x * 2; // shadowing!\n    // Value x is 12\n    println!(\"Value x is {}\", x);\n}\n// Value x is 6\nprintln!(\"Value x is {}\", x);\nlet x = \"New value\"; // shadowing!\n// Value x is New value\nprintln!(\"Value x is {}\", x);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}
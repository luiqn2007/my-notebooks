{"ID":"20240409205834-bct2y0h","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f980","id":"20240409205834-bct2y0h","title":"切片 slice","type":"doc","updated":"20240428122052"},"Children":[{"ID":"20240409205846-q95noo2","Type":"NodeParagraph","Properties":{"id":"20240409205846-q95noo2","updated":"20240428120658"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"slice"},{"Type":"NodeText","Data":"​ 是除了引用外另一个没有所有权的数据类型，表示对数组或"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240409213122-kxhopr4","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"集合"},{"Type":"NodeText","Data":"中一段连续元素或序列的引用。"}]},{"ID":"20240409205846-3wchach","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409205846-3wchach","updated":"20240428121202"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let s = String::from(\"Hello world!\");\n    let word = first_word(\u0026s);\n    // First word is Hello\n    println!(\"First word is {}\", word)\n}\n\nfn first_word(str: \u0026String) -\u003e \u0026str {\n    let bytes = str.as_bytes();\n\n    for (i, \u0026item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return \u0026str[..i];\n        }\n    }\n\n    \u0026str[..]\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409205846-6cp96r0","Type":"NodeParagraph","Properties":{"id":"20240409205846-6cp96r0","updated":"20240428120730"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"String"},{"Type":"NodeText","Data":"​ 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"slice"},{"Type":"NodeText","Data":"​ 类型为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026amp;str"},{"Type":"NodeText","Data":"​, 这也是直接使用字面量字符串赋值的类型；其他类型使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026amp;[type]"},{"Type":"NodeText","Data":"​, 如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026amp;[i32]"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240409205846-n3b8ael","Type":"NodeParagraph","Properties":{"id":"20240409205846-n3b8ael","updated":"20240428122052"},"Children":[{"Type":"NodeText","Data":"slice 使用一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Range"},{"Type":"NodeText","Data":"​ 表示范围，若从 0 开始则可省略起点，到最后一个元素为止则可省略结束"}]},{"ID":"20240409205846-poddch6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409205846-poddch6","updated":"20240409205846"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let a = [1, 2, 3, 4, 5];\n    // sa1: 2, 3\n    let sa1 = \u0026a[1..3];\n    println!(\"sa1: {}, {}\", sa1[0], sa1[1]);\n    // sa2: 1, 2, 3\n    let sa2 = \u0026a[..3];\n    println!(\"sa2: {}, {}, {}\", sa2[0], sa2[1], sa2[2]);\n    // sa3: 4, 5\n    let sa3 = \u0026a[3..];\n    println!(\"sa3: {}, {}\", sa3[0], sa3[1]);\n    // sa4: 1, 2, 3, 4, 5\n    let sa4 = \u0026a[..];\n    println!(\"sa4: {}, {}, {}, {}, {}\", sa4[0], sa4[1], sa4[2], sa4[3], sa4[4]);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}
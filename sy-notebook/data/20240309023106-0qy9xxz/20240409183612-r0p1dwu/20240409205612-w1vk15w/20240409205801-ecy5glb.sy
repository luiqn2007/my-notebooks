{"ID":"20240409205801-ecy5glb","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f980","id":"20240409205801-ecy5glb","title":"引用与借用","type":"doc","updated":"20240428162534"},"Children":[{"ID":"20240409205810-9smjq9y","Type":"NodeParagraph","Properties":{"id":"20240409205810-9smjq9y","updated":"20240427192747"},"Children":[{"Type":"NodeText","Data":"Rust 支持直接传递变量的引用，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026amp;"},{"Type":"NodeText","Data":"​ 标记，允许使用值但不获取其所有权。创建引用的过程叫做借用。"}]},{"ID":"20240409205810-kwb6akd","Type":"NodeParagraph","Properties":{"id":"20240409205810-kwb6akd","updated":"20240409205810"},"Children":[{"Type":"NodeText","Data":"引用的存在遵循以下规则："}]},{"ID":"20240409205810-wnsn5mg","Type":"NodeList","ListData":{},"Properties":{"id":"20240409205810-wnsn5mg","updated":"20240409205810"},"Children":[{"ID":"20240409205810-33wnicb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240409205810-33wnicb","updated":"20240409205810"},"Children":[{"ID":"20240409205810-tp7vjn0","Type":"NodeParagraph","Properties":{"id":"20240409205810-tp7vjn0","updated":"20240409205810"},"Children":[{"Type":"NodeText","Data":"任意给定时间（作用域内），无法同时存在超过一个可变引用，也无法在不可变引用存在的情况下存在可变引用"}]}]},{"ID":"20240409205810-yh59205","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240409205810-yh59205","updated":"20240409205810"},"Children":[{"ID":"20240409205810-8499dz8","Type":"NodeParagraph","Properties":{"id":"20240409205810-8499dz8","updated":"20240409205810"},"Children":[{"Type":"NodeText","Data":"引用必须总是有效"}]}]}]},{"ID":"20240427192751-iy8cou7","Type":"NodeParagraph","Properties":{"id":"20240427192751-iy8cou7","updated":"20240427192844"},"Children":[{"Type":"NodeText","Data":"引用通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"*ref"},{"Type":"NodeText","Data":"​ "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"解引用"},{"Type":"NodeText","Data":"，可用于获取被引用的值。"}]},{"ID":"20240409205810-5a4ze16","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409205810-5a4ze16","updated":"20240427190757"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let s1 = String::from(\"hello\");\n    // 传递的是一个 \u0026String 类型，即对 String 的引用，可访问到 s1 但不拥有它\n    let len = calculate_length(\u0026s1);\n    // hello.len=5\n    println!(\"{}.len={}\", s1, len);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409210250-gtahtza","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409210250-gtahtza","updated":"20240427190757"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn calculate_length(s: \u0026String) -\u003e usize {\n    s.len()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409205810-il0orrc","Type":"NodeParagraph","Properties":{"id":"20240409205810-il0orrc","updated":"20240409210317"},"Children":[{"Type":"NodeText","Data":"引用的值无法被修改。若想要修改引用值，首先要将变量转化为可变变量，然后使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026amp;mut"},{"Type":"NodeText","Data":"​ 作为变量类型。"}]},{"ID":"20240409205810-c0dw1kq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409205810-c0dw1kq","updated":"20240409210317"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let mut s1 = String::from(\"hello\");\n    change(\u0026mut s1);\n    // hello, world\n    println!(\"{}\", s1);\n}\n\nfn change(s: \u0026mut String) {\n    s.push_str(\", world\");\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409210155-5lmznmc","Type":"NodeSuperBlock","Properties":{"id":"20240409210155-5lmznmc","updated":"20240428161806"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240409210122-upo9c86","Type":"NodeSuperBlock","Properties":{"id":"20240409210122-upo9c86","updated":"20240428161806"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"row"},{"ID":"20240409205810-4wg1znd","Type":"NodeParagraph","Properties":{"id":"20240409205810-4wg1znd","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240427192935"},"Children":[{"Type":"NodeText","Data":"同一时刻，只能有一个对某变量的可变引用"}]},{"ID":"20240409205810-dlvdluf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409205810-dlvdluf","updated":"20240409210123"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"let mut s1 = String::from(\"hello\");\n\nlet r1 = \u0026mut s1;\n// let r1 = \u0026mut s1;\n//          ------- first mutable borrow occurs here\n// let r2 = \u0026mut s1;\n//          ^^^^^^^ second mutable borrow occurs here\n// \n// println!(\"{}, {}\", r1, r2);\n//                    -- first borrow later used here\nlet r2 = \u0026mut s1;\n\nprintln!(\"{}, {}\", r1, r2);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240409210150-zlsqigl","Type":"NodeSuperBlock","Properties":{"id":"20240409210150-zlsqigl","updated":"20240427192957"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"row"},{"ID":"20240409205810-mi9e06s","Type":"NodeParagraph","Properties":{"id":"20240409205810-mi9e06s","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240427192957"},"Children":[{"Type":"NodeText","Data":"不能在持有不可变引用的同时持有可变引用"}]},{"ID":"20240409205810-bl7zs2z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409205810-bl7zs2z","updated":"20240409210151"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let mut s1 = String::from(\"hello\");\n\n    let r1 = \u0026s1;\n    let r2 = \u0026s1;\n    // let r1 = \u0026s1;\n    //          --- immutable borrow occurs here\n    // let r2 = \u0026s1;\n    // let r3 = \u0026mut s1;\n    //          ^^^^^^^ mutable borrow occurs here\n    // \n    // println!(\"{}, {}. {}\", r1, r2, r3);\n    //                        -- immutable borrow later used here\n    let r3 = \u0026mut s1;\n\n    println!(\"{}, {}. {}\", r1, r2, r3);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240409205810-gty05zf","Type":"NodeParagraph","Properties":{"id":"20240409205810-gty05zf","updated":"20240409205810"},"Children":[{"Type":"NodeText","Data":"注意一个引用的作用域是从声明开始，到最后一次使用为止。因此以在不同作用域中使用，也可以在使用后声明，这不是同时拥有"}]},{"ID":"20240409205810-259ja01","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409205810-259ja01","updated":"20240409205810"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let mut s1 = String::from(\"hello\");\n\n    {\n        let r1 = \u0026mut s1;\n    }\n\n    let r2 = \u0026s1;\n    let r3 = \u0026s1;\n    println!(\"{} and {}\", r2, r3);\n    // r1 已脱离作用域，r2 r3 已被使用都失效了，因此此时声明不再是同时拥有\n    let r4 = \u0026mut s1;\n    println!(\"{}\", r4);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409205810-508f6z3","Type":"NodeParagraph","Properties":{"id":"20240409205810-508f6z3","updated":"20240427193306"},"Children":[{"Type":"NodeText","Data":"对于其他存在指针概念的语言中，易由于释放内存时保留指向它的指针而形成"},{"Type":"NodeTextMark","TextMarkType":"inline-memo","TextMarkInlineMemoContent":"使用指针时，指向的内存已被分配给其他持有者_esc_newline_如 C 中，free 了一个指针，但后面又访问了这个指针","TextMarkTextContent":"悬垂指针"},{"Type":"NodeText","Data":"。但 Rust 不允许在作用域外存在对应指针。"}]},{"ID":"20240409205822-aaq56ew","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409205822-aaq56ew","updated":"20240409205826"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let reference_to_nothing = dangle();\n}\n// fn dangle() -\u003e \u0026String {\n//                ^ expected named lifetime parameter\n// help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n// help: consider using the `'static` lifetime\n// fn dangle() -\u003e \u0026'static String {\n//                ~~~~~~~~\nfn dangle() -\u003e \u0026String {\n    let s = String::from(\"hello\");\n    \u0026s\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409205829-aldxk5a","Type":"NodeParagraph","Properties":{"id":"20240409205829-aldxk5a","updated":"20240409205829"},"Children":[{"Type":"NodeText","Data":"解决方法为直接返回 String 本身，转移所有权"}]}]}
{"ID":"20240409220643-mgmduah","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f980","id":"20240409220643-mgmduah","title":"Rc","type":"doc","updated":"20240409220730"},"Children":[{"ID":"20240409220653-y02glfe","Type":"NodeParagraph","Properties":{"id":"20240409220653-y02glfe","updated":"20240409220730"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Rc\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 通过引用计数，允许使用多个所有权，适用于希望在程序多个部分读取，且编译时无法确定哪一部分最后完成的堆内存。但只适用于单线程。"}]},{"ID":"20240409220653-gwkq7ij","Type":"NodeParagraph","Properties":{"id":"20240409220653-gwkq7ij","updated":"20240409220730"},"Children":[{"Type":"NodeText","Data":"在存储数据时使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Rc.clone(Rc)"},{"Type":"NodeText","Data":"​ 方法为一个数据创建多个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Rc\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 结构并增加引用计数，当最后一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Rc\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 释放，即引用计数为 0 时数据销毁。"}]},{"ID":"20240409220653-0q13w32","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409220653-0q13w32","updated":"20240409220730"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"use std::rc::Rc;\n\nfn main() {\n    let a = 123;\n    let p1 = Rc::new(a);\n    // Counter: 1\n    println!(\"Counter: {}\", Rc::strong_count(\u0026p1));\n    let p2 = p1.clone();\n    // Counter: 2\n    println!(\"Counter: {}\", Rc::strong_count(\u0026p1));\n    let p3 = p1.clone();\n    // Counter: 3\n    println!(\"Counter: {}\", Rc::strong_count(\u0026p1));\n\n    use_data(p1);\n    // Counter: 2\n    println!(\"Counter: {}\", Rc::strong_count(\u0026p3));\n    use_data(p2);\n    // Counter: 1\n    println!(\"Counter: {}\", Rc::strong_count(\u0026p3));\n    use_data(p3);\n}\n\nfn use_data(data: Rc\u003ci32\u003e) {}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409220653-9varlli","Type":"NodeParagraph","Properties":{"id":"20240409220653-9varlli","updated":"20240409220653"},"Children":[{"Type":"NodeText","Data":"循环引用易造成内存泄漏，可使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Rc::downgrade"},{"Type":"NodeText","Data":"​ 获取弱引用代替，弱引用不属于所有权关系，不会造成引用循环。弱引用类型为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Weak\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240409220706-1b3xq6w","Type":"NodeSuperBlock","Properties":{"id":"20240409220706-1b3xq6w","updated":"20240409220707"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240409220653-hpou7us","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409220653-hpou7us","updated":"20240409220707"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"use std::cell::RefCell;\nuse std::rc::{Rc, Weak};\n\nstruct Node {\n    value: i32,\n    // 当 parent 移除时，children.parent 也应释放，反之不行\n    // 即 实际上 children 不应持有 parent 的所有权 避免循环引用\n    parent: Weak\u003cNode\u003e,\n    // RefCell 类似 \u0026mut, 可在运行时修改数据\n    children: RefCell\u003cVec\u003cRc\u003cNode\u003e\u003e\u003e\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409220702-kjf466m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409220702-kjf466m","updated":"20240409220707"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let root = Rc::new(Node {\n        value: 0,\n        // 指向 Option::None\n        parent: Weak::new(),\n        children: RefCell::new(vec![])\n    });\n\n    let leaf = Rc::new(Node {\n        value: 1,\n        parent: Rc::downgrade(\u0026root),\n        children: RefCell::new(vec![])\n    });\n\n    root.children.borrow_mut().push(leaf);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]}]}
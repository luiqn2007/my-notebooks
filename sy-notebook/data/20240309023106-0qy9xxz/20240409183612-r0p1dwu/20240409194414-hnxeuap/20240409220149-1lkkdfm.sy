{"ID":"20240409220149-1lkkdfm","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f980","id":"20240409220149-1lkkdfm","title":"Box","type":"doc","updated":"20240428151334"},"Children":[{"ID":"20240409220157-q9mr93p","Type":"NodeParagraph","Properties":{"id":"20240409220157-q9mr93p","updated":"20240409220157"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Box\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 是最简单的智能指针，允许将值放入堆中，栈上保留指向堆内存的指针。除指向堆内存外该指针无额外性能消耗，也不提供任何额外功能。"}]},{"ID":"20240409220157-g8xmg1k","Type":"NodeList","ListData":{},"Properties":{"id":"20240409220157-g8xmg1k","updated":"20240428135904"},"Children":[{"ID":"20240409220157-9d0dxeh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240409220157-9d0dxeh","updated":"20240409220157"},"Children":[{"ID":"20240409220157-25vdpg8","Type":"NodeParagraph","Properties":{"id":"20240409220157-25vdpg8","updated":"20240409220157"},"Children":[{"Type":"NodeText","Data":"递归类型：编译时未知大小，但实际使用时有确切大小"}]}]},{"ID":"20240409220157-yvisn97","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240409220157-yvisn97","updated":"20240409220157"},"Children":[{"ID":"20240409220157-1kqc71h","Type":"NodeParagraph","Properties":{"id":"20240409220157-1kqc71h","updated":"20240409220157"},"Children":[{"Type":"NodeText","Data":"改善拷贝性能：有大量数据且希望不拷贝的情况下转移所有权"}]}]}]},{"ID":"20240409220157-hdii3fs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409220157-hdii3fs","updated":"20240409220157"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"fn main() {\n    let b = Box::new(5);\n    // b = 5\n    println!(\"b = {}\", b);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409220158-p67400k","Type":"NodeParagraph","Properties":{"id":"20240409220158-p67400k","updated":"20240409220336"},"Children":[{"Type":"NodeText","Data":"以实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cons list"},{"Type":"NodeText","Data":"​ 为例，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Box\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​："}]},{"ID":"20240409220245-3cbposp","Type":"NodeParagraph","Properties":{"id":"20240409220245-3cbposp","style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);","updated":"20240409220303"},"Children":[{"Type":"NodeText","Data":"来源于 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"Lisp"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​ 语言，利用当前值和另一个列表来构建新列表，表示将一个值连接到另一个值的开头，最后一项为 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"Nil"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​ 表示结束，有点像链表。"}]},{"ID":"20240409220309-y5i2x1x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409220309-y5i2x1x","updated":"20240409220309"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"enum List {\n// ^^^^^^ recursive type has infinite size\n    Cons(i32, List),\n // ---- recursive without indirection\n    Nil\n}\n\nfn main() {\n    // [1, 2, 3]\n    let list = Cons(1, Cons(2, Cons(3, Nil)));\n}\n\n// help: insert some indirection (e.g., a `Box`, `Rc`, or `\u0026`) to make `List` representable\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240409220351-7fgb0et","Type":"NodeParagraph","Properties":{"id":"20240409220351-7fgb0et","updated":"20240428150525"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Box\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 实现"}]},{"ID":"20240409220351-qzidxru","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240409220351-qzidxru","updated":"20240428150857"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cnVzdA=="},{"Type":"NodeCodeBlockCode","Data":"use crate::List::{Cons, Nil};\n\nenum List {\n    Cons(i32, Box\u003cList\u003e),\n    Nil\n}\n\nfn main() {\n    // [1, 2, 3]\n    let list =\n     Cons(1, Box::new(\n        Cons(2, Box::new(\n            Cons(3, Box::new(Nil))))));\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240428150857-0r4wyyo","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240428150857-0r4wyyo","updated":"20240428150900"},"Children":[{"Type":"NodeText","Data":"动态分发"}]},{"ID":"20240428150907-93bulx9","Type":"NodeParagraph","Properties":{"id":"20240428150907-93bulx9","updated":"20240428151129"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Box\u0026lt;dyn Trait名\u0026gt;"},{"Type":"NodeText","Data":"​ 可以引用一个 Trait 实现，要求对应实现必须是一个 "},{"Type":"NodeTextMark","TextMarkType":"inline-memo","TextMarkInlineMemoContent":"只关心值是否实现了某 trait 但不关心具体类型","TextMarkTextContent":"Trait 对象"}]},{"ID":"20240428135852-dmgi1oe","Type":"NodeBlockquote","Properties":{"id":"20240428135852-dmgi1oe","updated":"20240428151334"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240428135856-1jm3yz0","Type":"NodeParagraph","Properties":{"id":"20240428135856-1jm3yz0","updated":"20240428135901"},"Children":[{"Type":"NodeText","Data":"当对象安全时可认为是 Trait 对象，可使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Box\u0026lt;dyn T\u0026gt;"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240428135856-47e223r","Type":"NodeList","ListData":{},"Properties":{"id":"20240428135856-47e223r","updated":"20240428151334"},"Children":[{"ID":"20240428135856-i0pmrzb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240428135856-i0pmrzb","updated":"20240428151319"},"Children":[{"ID":"20240428135856-iz7med0","Type":"NodeParagraph","Properties":{"id":"20240428135856-iz7med0","updated":"20240428151319"},"Children":[{"Type":"NodeText","Data":"特征不存在返回类型为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Self"},{"Type":"NodeText","Data":"​ 的方法"}]}]},{"ID":"20240428135856-qc693p0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240428135856-qc693p0","updated":"20240428151334"},"Children":[{"ID":"20240428135856-6rdvo1h","Type":"NodeParagraph","Properties":{"id":"20240428135856-6rdvo1h","updated":"20240428151334"},"Children":[{"Type":"NodeText","Data":"特征不存在包含泛型参数的方法"}]}]}]}]},{"ID":"20240428150947-2u6o7q9","Type":"NodeParagraph","Properties":{"id":"20240428150947-2u6o7q9","updated":"20240428150947"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"parent-style":"width: 1029px;","style":"width: 1019px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240428150907-8fju816.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 1019px;\" parent-style=\"width: 1029px;\"}"},{"Type":"NodeText","Data":"​"}]}]}
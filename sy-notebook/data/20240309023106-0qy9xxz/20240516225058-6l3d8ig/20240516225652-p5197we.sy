{"ID":"20240516225652-p5197we","Spec":"1","Type":"NodeDocument","Properties":{"icon":"scala.png","id":"20240516225652-p5197we","title":"泛型","type":"doc","updated":"20240516230027"},"Children":[{"ID":"20240516225703-520o5pk","Type":"NodeParagraph","Properties":{"id":"20240516225703-520o5pk","updated":"20240516225703"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"[]"},{"Type":"NodeText","Data":"​ 设置，类似 Java 的泛型"}]},{"ID":"20240516225703-bid0h49","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516225703-bid0h49","updated":"20240516225703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"// 带有泛型的特质\ntrait Iterable[A] {\n    def hasNext: Boolean\n    def next(): A\n}\n\n// 泛型类\nclass Stack[A] {\n    private var elements: List[A] = Nil\n\n    def push(x: A) { elements = x :: elements }\n    def peek: A = elements.head\n    def pop: A = {\n        val currentTop = peek\n        elements = elements.tail\n        currentTop\n    }\n}\nval stack = new Stack[Int]\n// 可以传入所有 Int 类型及其子类型的参数\nstack.push(1)\nstack.push(2)\nprintln(stack.pop) // 2\nprintln(stack.pop) // 1\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516225703-8utg6p5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240516225703-8utg6p5","updated":"20240516230027"},"Children":[{"Type":"NodeText","Data":"协变与逆变"}]},{"ID":"20240516225703-sk1q2ze","Type":"NodeParagraph","Properties":{"id":"20240516225703-sk1q2ze","updated":"20240516225703"},"Children":[{"Type":"NodeText","Data":"不变：默认情况下，泛型不变，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Class[A]"},{"Type":"NodeText","Data":"​ 与 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Class[B]"},{"Type":"NodeText","Data":"​ 不存在任何继承关系，即使 A 与 B 存在继承关系"}]},{"ID":"20240516225703-1odj9c1","Type":"NodeParagraph","Properties":{"id":"20240516225703-1odj9c1","updated":"20240516225847"},"Children":[{"Type":"NodeText","Data":"协变： "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"+T -\u0026gt; Class[+A]"},{"Type":"NodeText","Data":"​: 若存在类型 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"​ 为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"​ 的子类型，则 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Class[A]"},{"Type":"NodeText","Data":"​ 为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Class[B]"},{"Type":"NodeText","Data":"​ 的子类型"}]},{"ID":"20240516225911-l409xs1","Type":"NodeSuperBlock","Properties":{"id":"20240516225911-l409xs1","updated":"20240516225912"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240516225703-5ylj39b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516225703-5ylj39b","updated":"20240516225912"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"abstract class Animal {\n    def name: String\n}\ncase class Cat(name: String) extends Animal\ncase class Dog(name: String) extends Animal\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516225905-g0p21zk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516225905-g0p21zk","updated":"20240516225912"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"def printAnimalNames(animals: List[+Animal] /** 可以接受 List[Cat], List[Dog] */): Unit = {\n    animals.foreach(animal =\u003e println(animal.name))\n}\nval cats: List[Cat] = List(Cat(\"Whiskers\"), Cat(\"Tom\"))\nval dogs: List[Dog] = List(Dog(\"Fido\"), Dog(\"Rex\"))\nprintAnimalNames(cats) // Whiskers Tom\nprintAnimalNames(dogs) // Fido Rex\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240516225703-bimsjeq","Type":"NodeParagraph","Properties":{"id":"20240516225703-bimsjeq","updated":"20240516225814"},"Children":[{"Type":"NodeText","Data":"逆变: "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"-T -\u0026gt; Class[-A]"},{"Type":"NodeText","Data":"​: 若存在类型 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"​ 为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"​ 的子类型，则 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Class[B]"},{"Type":"NodeText","Data":"​ 为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Class[A]"},{"Type":"NodeText","Data":"​ 的子类型"}]},{"ID":"20240516225751-pl0adx5","Type":"NodeSuperBlock","Properties":{"id":"20240516225751-pl0adx5","updated":"20240516225751"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240516225703-z9lqz3j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516225703-z9lqz3j","updated":"20240516225751"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"abstract class Animal {\n    def name: String\n}\ncase class Cat(name: String) extends Animal\ncase class Dog(name: String) extends Animal\n\nabstract class Pointer[-A] {\n    def print(value: A): Unit\n}\n\nclass AnimalPointer extends Pointer[Animal] {\n    override def print(animal: Animal): Unit = println(\"animal: \" + animal.name)\n}\n\nclass CatPointer extends Pointer[Cat] {\n    override def print(cat: Cat): Unit = println(\"cat: \" + cat.name)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516225744-9vgbxqe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516225744-9vgbxqe","updated":"20240516225751"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"// 逆变\n// 接收 Pointer[Cat] 和 Pointer[Animal]\ndef printMyCat(pointer: Pointer[Cat]): Unit = {\n    pointer.print(myCat)\n}\n\nval myCat = Cat(\"Boots\")\nval catPointer: Pointer[Cat] = new CatPointer\nval animalPointer: Pointer[Cat] = new AnimalPointer\nConvarianceTest.printMyCat(catPointer) // cat: Boots\nConvarianceTest.printMyCat(animalPointer) // animal: Boots\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240516225703-8skdigg","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240516225703-8skdigg","updated":"20240516230027"},"Children":[{"Type":"NodeText","Data":"上下界"}]},{"ID":"20240516230025-ovzmszb","Type":"NodeSuperBlock","Properties":{"id":"20240516230025-ovzmszb","updated":"20240516230025"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240516230018-7v1ud9c","Type":"NodeSuperBlock","Properties":{"id":"20240516230018-7v1ud9c","updated":"20240516230025"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"row"},{"ID":"20240516225703-jlxaahy","Type":"NodeParagraph","Properties":{"id":"20240516225703-jlxaahy","updated":"20240516230019"},"Children":[{"Type":"NodeText","Data":"声明上界：泛型的类型必须是\"某种类型\"或某种类型的\"子类\""}]},{"ID":"20240516225703-dvy6f2z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516225703-dvy6f2z","updated":"20240516230019"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"// 特殊标记：\u003c%，类似 \u003c:，允许使用隐式转换（详见隐式转换）\nabstract class Animal {\n    def name: String\n}\n\nabstract class Pet extends Animal\n\nclass Cat extends Pet {\n    override def name: String = \"cat\"\n}\n\nclass Dog extends Pet {\n    override def name: String = \"dog\"\n}\n\nclass Lion extends Animal {\n    override def name: String = \"lion\"\n}\n\nclass PetContainer[P \u003c: Pet /** 不能是 Lion */](p: P) {\n    def pet: P = p\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240516230022-63yeebx","Type":"NodeSuperBlock","Properties":{"id":"20240516230022-63yeebx","updated":"20240516230025"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"row"},{"ID":"20240516225703-7pm22j5","Type":"NodeParagraph","Properties":{"id":"20240516225703-7pm22j5","updated":"20240516230022"},"Children":[{"Type":"NodeText","Data":"声明下界：泛型的类型必须是\"某种类型\"或某种类型的\"父类\""}]},{"ID":"20240516225703-wzwdti7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516225703-wzwdti7","updated":"20240516230022"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"trait Node[+B] {\n    def prepend[U \u003e: B](elem: U): Node[U]\n}\n\ncase class ListNode[+B](h: B, t: Node[B]) extends Node[B] {\n    def prepend[U \u003e: B](elem: U): ListNode[U] = ListNode(elem, this)\n    def head: B = h\n    def tail: Node[B] = t\n}\n\ncase class Nil[+B]() extends Node[B] {\n    def prepend[U \u003e: B](elem: U): ListNode[U] = ListNode(elem, this)\n}\n\ntrait Bird\ncase class AfricanSwallow() extends Bird\ncase class EuropeanSwallow() extends Bird\n\nval africanSwallowList = ListNode[AfricanSwallow](AfricanSwallow(), Nil())\nval birdList: Node[Bird] = africanSwallowList\nbirdList.prepend(new EuropeanSwallow)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240516230027-45siep0","Type":"NodeParagraph","Properties":{"id":"20240516230027-45siep0"}}]}
{"ID":"20240516230126-e855he2","Spec":"1","Type":"NodeDocument","Properties":{"icon":"scala.png","id":"20240516230126-e855he2","title":"隐式转换","type":"doc","updated":"20240516231339"},"Children":[{"ID":"20240516230132-th21rnk","Type":"NodeParagraph","Properties":{"id":"20240516230132-th21rnk","updated":"20240516230132"},"Children":[{"Type":"NodeText","Data":"实现类型转换的是隐含方法（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"implicit"},{"Type":"NodeText","Data":"​），设待转换对象为 e，则有"}]},{"ID":"20240516230132-cd80ukr","Type":"NodeList","ListData":{},"Properties":{"id":"20240516230132-cd80ukr","updated":"20240516230144"},"Children":[{"ID":"20240516230132-b7hz6os","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516230132-b7hz6os","updated":"20240516230144"},"Children":[{"ID":"20240516230132-rsj80t5","Type":"NodeParagraph","Properties":{"id":"20240516230132-rsj80t5","updated":"20240516230144"},"Children":[{"Type":"NodeText","Data":"表达式的类型为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"S"},{"Type":"NodeText","Data":"​，且 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"S"},{"Type":"NodeText","Data":"​ 不符合期望类型 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"T"},{"Type":"NodeText","Data":"​： 搜索转换 c 适用于 e，且结果为 T"}]}]},{"ID":"20240516230132-64swmfr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516230132-64swmfr","updated":"20240516230132"},"Children":[{"ID":"20240516230132-x4orp4c","Type":"NodeParagraph","Properties":{"id":"20240516230132-x4orp4c","updated":"20240516230132"},"Children":[{"Type":"NodeText","Data":"类型为 S 的实例对象中调用某方法 m，且该方法未在 S 中声明：搜索转换 c 适用于 e，且包含方法 m"}]}]}]},{"ID":"20240516230132-ale9kbj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516230132-ale9kbj","updated":"20240516230132"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"import scala.language.implicitConversions\n// 定义在类外部的隐式转换\nimplicit def list2ordered[A](x: List[A])(implicit elem2ordered: A =\u003e Ordered[A]): Ordered[List[A]] = \n    new Ordered[List[A]] {\n        def compare(that: List[A]): Int = 1\n    }\n// 上下文中存在 List[A]=\u003eOrdered[List[A]] 和 Int=\u003eOrdered[Int]\n// Int=\u003eOrdered[Int] 位于 scala.Predef.intWrapper\nList(1, 2, 3) \u003c= List(4, 5) \n\n// 一个更简单的隐式转换\nclass BufferType private(private val value: Int)\n// 定义在伴随对象中（详见后面 类与特质 一节）\nobject BufferType {\n  val ARRAY_BUFFER: BufferType = BufferType(GL15.GL_ARRAY_BUFFER)\n  implicit def toIntFunction(bufferType: BufferType): Int = bufferType.value\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516231307-5yd6zu2","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240516231307-5yd6zu2","updated":"20240516231339"},"Children":[{"Type":"NodeText","Data":"函数隐式参数"}]},{"ID":"20240516231307-0v6qgjy","Type":"NodeParagraph","Properties":{"id":"20240516231307-0v6qgjy","updated":"20240516231339"},"Children":[{"Type":"NodeText","Data":"若参数列表中没有正确传入指定类型的参数，Scala 会判断是否能自行获取正确类型的隐式值，查找顺序如下："}]},{"ID":"20240516231307-kdbpkib","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240516231307-kdbpkib","updated":"20240516231332"},"Children":[{"ID":"20240516231326-6nshtzj","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240516231326-6nshtzj","updated":"20240516231326"},"Children":[{"ID":"20240516231326-ltbhi71","Type":"NodeParagraph","Properties":{"id":"20240516231326-ltbhi71","updated":"20240516231326"},"Children":[{"Type":"NodeText","Data":"所在代码块中寻找是否有可直接访问的被 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"implicit"},{"Type":"NodeText","Data":"​ 修饰的参数或方法"}]}]},{"ID":"20240516231328-lvtmg36","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240516231328-lvtmg36","updated":"20240516231332"},"Children":[{"ID":"20240516231328-p1d3jxn","Type":"NodeParagraph","Properties":{"id":"20240516231328-p1d3jxn","updated":"20240516231332"},"Children":[{"Type":"NodeText","Data":"在所在类的伴生对象中找与隐式参数相关的被 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"implicit"},{"Type":"NodeText","Data":"​ 修饰的成员"}]}]}]},{"ID":"20240516231307-xq78w4y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516231307-xq78w4y","updated":"20240516231312"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"abstract class Monoid[A] {\n    def add(x: A, y: A): A\n    def unit: A\n}\n\nobject ImplicitTest {\n    implicit val stringMonoid: Monoid[String] = new Monoid[String] {\n        def add(x: String, y: String): String = x concat y\n        def unit: String = \"\"\n    }\n\n    implicit val intMonoid: Monoid[Int] = new Monoid[Int] {\n        def add(x: Int, y: Int): Int = x + y\n        def unit: Int = 0\n    }\n\n    def sum[A](xs: List[A])(implicit m: Monoid[A]): A =\n        if (xs.isEmpty) m.unit\n        else m.add(xs.head, sum(xs.tail))\n\n\n    def main(args: Array[String]): Unit = {\n        println(sum(List(1, 2, 3)))       // 6\n        println(sum(List(\"a\", \"b\", \"c\"))) // abc\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516231307-ylx8t1n","Type":"NodeParagraph","Properties":{"id":"20240516231307-ylx8t1n","updated":"20240516231312"}}]}
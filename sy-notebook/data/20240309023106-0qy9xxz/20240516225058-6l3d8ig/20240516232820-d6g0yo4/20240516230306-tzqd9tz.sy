{"ID":"20240516230306-tzqd9tz","Spec":"1","Type":"NodeDocument","Properties":{"icon":"scala.png","id":"20240516230306-tzqd9tz","title":"类型成员","type":"doc","updated":"20240516230313"},"Children":[{"ID":"20240516230313-56v9fk1","Type":"NodeParagraph","Properties":{"id":"20240516230313-56v9fk1","updated":"20240516230313"},"Children":[{"Type":"NodeText","Data":"Trait 和 抽象类都可以包含抽象类型成员，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"type"},{"Type":"NodeText","Data":"​ 声明，实际类型可由具体实现确定"}]},{"ID":"20240516230313-561ius3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516230313-561ius3","updated":"20240516230313"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"trait Buffer {\n    type T\n    val element: T\n}\n\nabstract class SeqBuffer extends Buffer {\n    type U\n    type T \u003c: Seq[U] // 给 T 追加类型上界\n    def length = element.length\n}\n\n// 常和匿名类使用\nabstract class IntSeqBuffer extends SeqBuffer {\n    type U = Int\n}\n\ndef newIntSeqBuf(elem1: Int, elem2: Int): IntSeqBuffer = new IntSeqBuffer {\n    type T = List[U]\n    val element = List(elem1, elem2)\n}\nval buf = newIntSeqBuf(7, 8)\nprintln(\"length = \" + buf.length)\nprintln(\"content = \" + buf.element)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516230313-31sgmfo","Type":"NodeParagraph","Properties":{"id":"20240516230313-31sgmfo","updated":"20240516230313"},"Children":[{"Type":"NodeText","Data":"类型成员与泛型基本等效，可与泛型互换"}]},{"ID":"20240516230313-nqo9j50","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516230313-nqo9j50","updated":"20240516230313"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE="},{"Type":"NodeCodeBlockCode","Data":"abstract class Buffer2[+T] {\n    val element: T\n}\n\nabstract class SeqBuffer2[U, +T \u003c: Seq[U]] extends Buffer2[T] {\n    def length = element.length\n}\n\ndef newIntSeqBuf2(elem1: Int, elem2: Int): SeqBuffer2[Int, Seq[Int]] = new SeqBuffer2[Int, List[Int]] {\n    val element = List(elem1, elem2)\n}\nval buf2 = newIntSeqBuf(7, 8)\nprintln(\"length = \" + buf.length)\nprintln(\"content = \" + buf.element)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}
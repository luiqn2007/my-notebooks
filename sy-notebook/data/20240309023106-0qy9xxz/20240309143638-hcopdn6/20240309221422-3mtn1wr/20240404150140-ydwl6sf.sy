{"ID":"20240404150140-ydwl6sf","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f468-200d-1f9bd","id":"20240404150140-ydwl6sf","title":"Flow 响应式流","type":"doc","updated":"20240404150536"},"Children":[{"ID":"20240404150220-jkcmkns","Type":"NodeParagraph","Properties":{"id":"20240404150220-jkcmkns","updated":"20240404150220"},"Children":[{"Type":"NodeText","Data":"响应式流用于实现非阻塞背压的异步流处理，元素流从发布者传递到订阅者，不经过任何阻塞"}]},{"ID":"20240404150207-lbjvvwe","Type":"NodeParagraph","Properties":{"id":"20240404150207-lbjvvwe","updated":"20240404150224"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"1240"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1240-20240404150207-3iycdrj.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240404150220-1a5id4u","Type":"NodeList","ListData":{},"Properties":{"id":"20240404150220-1a5id4u","updated":"20240404150230"},"Children":[{"ID":"20240404150220-p14fttj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240404150220-p14fttj","updated":"20240404150230"},"Children":[{"ID":"20240404150220-65m00om","Type":"NodeParagraph","Properties":{"id":"20240404150220-65m00om","updated":"20240404150230"},"Children":[{"Type":"NodeText","Data":"订阅者（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Subscriber"},{"Type":"NodeText","Data":"​） 通过调用 发布者（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Publisher"},{"Type":"NodeText","Data":"​） 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"subscribe()"},{"Type":"NodeText","Data":"​ 方法订阅，订阅成功则触发订阅者的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"onSubscribe()"},{"Type":"NodeText","Data":"​ 方法向订阅者传递 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Subscription"},{"Type":"NodeText","Data":"​ 对象，否则触发 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"onError()"},{"Type":"NodeText","Data":"​ 方法结束对话"}]}]},{"ID":"20240404150220-dflp6ht","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240404150220-dflp6ht","updated":"20240404150220"},"Children":[{"ID":"20240404150220-bigaqty","Type":"NodeParagraph","Properties":{"id":"20240404150220-bigaqty","updated":"20240404150220"},"Children":[{"Type":"NodeText","Data":"订阅者通过调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Subscription.request(N)"},{"Type":"NodeText","Data":"​ 方法向发布者请求若干元素，可多次请求而不关心之前的请求是否已经发布"}]}]},{"ID":"20240404150220-a9b1ldy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240404150220-a9b1ldy","updated":"20240404150220"},"Children":[{"ID":"20240404150220-2c0l3em","Type":"NodeParagraph","Properties":{"id":"20240404150220-2c0l3em","updated":"20240404150220"},"Children":[{"Type":"NodeText","Data":"发布者通过触发订阅者的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"onNext(item)"},{"Type":"NodeText","Data":"​ 向订阅者发布元素，直到达到订阅者请求上限。若发布者再无更多元素发布给订阅者，触发订阅者 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"onComplete()"},{"Type":"NodeText","Data":"​ 方法并结束对话"}]}]},{"ID":"20240404150220-2hft56q","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240404150220-2hft56q","updated":"20240404150220"},"Children":[{"ID":"20240404150220-y6ulr9f","Type":"NodeParagraph","Properties":{"id":"20240404150220-y6ulr9f","updated":"20240404150220"},"Children":[{"Type":"NodeText","Data":"订阅者可通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Subscription.cancel()"},{"Type":"NodeText","Data":"​ 方法取消订阅并结束对话，但若之前的请求未完成则仍会在后续接收到发布者发布的请求"}]}]},{"ID":"20240404150220-706i8ww","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240404150220-706i8ww","updated":"20240404150220"},"Children":[{"ID":"20240404150220-f62r7x3","Type":"NodeParagraph","Properties":{"id":"20240404150220-f62r7x3","updated":"20240404150220"},"Children":[{"Type":"NodeText","Data":"若发布者遇到错误，将调用订阅者的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"onError()"},{"Type":"NodeText","Data":"​ 方法并结束会话"}]}]}]},{"ID":"20240404150208-1p967b6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240404150208-1p967b6","updated":"20240404150244"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"CompletableFuture\u003cVoid\u003e future;\n// 发布者 Flow.Publisher, Java 提供 SubmissionPublisher 实现类\n//   executor: 向订阅者提供元素的线程\n//   maxBufferCapacity: 给每个订阅者提供的最大缓冲区大小\n//   handler: 当发布-订阅会话出现异常并关闭时的处理函数\n// 发布方法\n//   offer 非阻塞，当 onDrop 返回 false 时移除，返回正数表示预估缓存剩余元素，负数表示发送失败的尝试次数\n//   submit 组设，直到订阅者可用于接受元素\ntry (SubmissionPublisher\u003cLong\u003e publisher = new SubmissionPublisher\u003c\u003e()) {\n    System.out.println(\"Publisher buffer capacity=\" + publisher.getMaxBufferCapacity());\n  \n    System.out.println(\"- Register subscriber\");\n    // consume 将给定方法包装为 ConsumerSubscriber 并注册\n    // subscribe 直接注册给定 Subscriber\n    future = publisher.consume(System.out::println);\n    System.out.println(\"- Publish data\");\n    LongStream.range(0, 5).forEach(publisher::submit);\n}\nif (future != null) {\n    try {\n        // 等待接受并处理数据\n        // 由于前面 try 已经关闭了发布者，这里一次性全部处理所有数据并输出\n        // 0 1 2 3 4\n        future.get();\n    } catch (InterruptedException | ExecutionException e) {\n        e.printStackTrace();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240404150250-p97hvit","Type":"NodeParagraph","Properties":{"id":"20240404150250-p97hvit","updated":"20240404150250"},"Children":[{"Type":"NodeText","Data":"自定义接收者和非阻塞实例"}]},{"ID":"20240404150454-qf9eemw","Type":"NodeSuperBlock","Properties":{"id":"20240404150454-qf9eemw","updated":"20240404150442"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"row"},{"ID":"20240404150250-4irbpi2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240404150250-4irbpi2","updated":"20240404150454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public static void main(String[] args) {\n    try (SubmissionPublisher\u003cLong\u003e publisher = new SubmissionPublisher\u003c\u003e(Executors.newFixedThreadPool(5), 5)) {\n        // subscribe 直接注册给定 Subscriber\n        publisher.subscribe(new CustomSubscriber(\"A\", 1000));\n        publisher.subscribe(new CustomSubscriber(\"B\", 2000));\n        publisher.subscribe(new CustomSubscriber(\"C\", 3000));\n        PublisherThread thread = new PublisherThread(publisher);\n        thread.start();\n        thread.join();\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240404150445-1axh7lt","Type":"NodeSuperBlock","Properties":{"id":"20240404150445-1axh7lt","updated":"20240404150442"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240404150414-847mej5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240404150414-847mej5","updated":"20240404150446"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class CustomSubscriber implements Flow.Subscriber\u003cLong\u003e {\n    String name;\n    long blockTime;\n    public CustomSubscriber(String name, long blockTime) {\n        this.name = name;\n        this.blockTime = blockTime;\n    }\n    @Override\n    public void onSubscribe(Flow.Subscription subscription) {\n        System.out.println(name + \" subscribed \" + subscription);\n        // 接受所有数据\n        subscription.request(Long.MAX_VALUE);\n    }\n    @Override\n    public void onNext(Long item) {\n        try {\n            System.out.println(name + \" receive \" + item + \" start.\");\n            Thread.sleep(blockTime);\n            System.out.println(name + \" receive \" + item + \" finished.\");\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    @Override\n    public void onError(Throwable throwable) {\n        System.out.println(name + \" error \" + throwable.getMessage());\n        throwable.printStackTrace();\n    }\n    @Override\n    public void onComplete() {\n        System.out.println(name + \" complete.\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240404150435-qwk5j8i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240404150435-qwk5j8i","updated":"20240404150442"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class PublisherThread extends Thread {\n    SubmissionPublisher\u003cLong\u003e publisher;\n    Random random = new Random();\n    public PublisherThread(SubmissionPublisher\u003cLong\u003e publisher) {\n        this.publisher = publisher;\n    }\n    @Override\n    public void run() {\n        for (int i = 0; i \u003c 10; i++) {\n            long value = random.nextLong();\n            boolean submit = random.nextBoolean();\n            if (submit) {\n                // 使用 submit 阻塞发送\n                System.out.println(\"-Submit value.\");\n                publisher.submit(value);\n            } else {\n                // 使用 offer 非阻塞发送\n                int subscriber = random.nextInt(5);\n                System.out.println(\"-Offer \" + subscriber);\n                publisher.offer(value, (s, v) -\u003e {\n                    switch (subscriber) {\n                        case 0: return \"A\".equals(((CustomSubscriber) s).name);\n                        case 1: return \"B\".equals(((CustomSubscriber) s).name);\n                        case 2: return \"C\".equals(((CustomSubscriber) s).name);\n                        default: return subscriber != 3;\n                    }\n                });\n            }\n            long waiting = random.nextLong(1000, 3000);\n            try {\n                Thread.sleep(waiting);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        System.out.println(\"-Publish finished.\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240404150307-uukgrvh","Type":"NodeBlockquote","Properties":{"id":"20240404150307-uukgrvh","updated":"20240404150307"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240404150307-wq5x60v","Type":"NodeParagraph","Properties":{"id":"20240404150307-wq5x60v","updated":"20240404150307"},"Children":[{"Type":"NodeText","Data":"注意：该实例未调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Flow.Subscription.cancel()"},{"Type":"NodeText","Data":"​ 方法，因此程序在发送完所有数据后并未退出"}]}]},{"ID":"20240404150307-l9gte9m","Type":"NodeParagraph","Properties":{"id":"20240404150307-l9gte9m","updated":"20240404150307"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Flow.Processor"},{"Type":"NodeText","Data":"​ 既是发送者又是接收者，可用来作为接收数据，过滤并发送的过滤器"}]},{"ID":"20240404150536-0k0k8md","Type":"NodeParagraph","Properties":{"id":"20240404150536-0k0k8md"}}]}
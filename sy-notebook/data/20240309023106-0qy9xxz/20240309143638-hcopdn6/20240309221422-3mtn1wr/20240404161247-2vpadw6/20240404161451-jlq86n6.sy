{"ID":"20240404161451-jlq86n6","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2615","id":"20240404161451-jlq86n6","tags":"Java21,实验性功能","title":"Structured Concurrency","type":"doc","updated":"20240404161507"},"Children":[{"ID":"20240404161507-7udvajy","Type":"NodeParagraph","Properties":{"id":"20240404161507-7udvajy","updated":"20240404161507"},"Children":[{"Type":"NodeText","Data":"Loom 子项目，JEP453，当使用多个并发时，有时候很难处理多个任务的异常并取消其他任务"}]},{"ID":"20240404161507-45xygub","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240404161507-45xygub","updated":"20240404161507"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"Future\u003cString\u003e user = executor.submit(() -\u003e {\n    // do something\n    return \"This is user\";\n});\nFuture\u003cInteger\u003e order = executor.submit(() -\u003e {\n    // do something\n    return 0;\n});\n// join\nuser.get();\norder.get();\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240404161507-ipszu4y","Type":"NodeParagraph","Properties":{"id":"20240404161507-ipszu4y","updated":"20240404161507"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"user"},{"Type":"NodeText","Data":"​ 获取失败时，无法取消 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"order"},{"Type":"NodeText","Data":"​ 任务"}]},{"ID":"20240404161507-p9dgwya","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240404161507-p9dgwya","updated":"20240404161507"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"import jdk.incubator.concurrent.StructuredTaskScope;\n\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\n\npublic class Main {\n    public static void main(String[] args) {\n        try (var scope = new StructuredTaskScope.ShutdownOnFailure()) {\n            Future\u003cObject\u003e task1 = scope.fork(() -\u003e null);\n            Future\u003cObject\u003e task2 = scope.fork(() -\u003e null);\n            Future\u003cObject\u003e task3 = scope.fork(() -\u003e null);\n            scope.join();\n            scope.throwIfFailed();\n        } catch (ExecutionException | InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240404161507-oxzj7ko","Type":"NodeParagraph","Properties":{"id":"20240404161507-oxzj7ko","updated":"20240404161507"},"Children":[{"Type":"NodeText","Data":"结构化并发中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"StructuredTaskScope"},{"Type":"NodeText","Data":"​ 允许将一批子任务作为一个单元调度"}]}]}
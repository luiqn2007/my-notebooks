{"ID":"20240516031050-zj8vwo5","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2615","id":"20240516031050-zj8vwo5","title":"Java NIO","type":"doc","updated":"20240516031324"},"Children":[{"ID":"20240516031057-4432h6k","Type":"NodeParagraph","Properties":{"id":"20240516031057-4432h6k","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"NIO 基于 Channel 与 Buffer，直接操作多个字节。由于有了 Buffer 缓冲区的存在，可以在 IO 读写时期挂起读写操作，实现非阻塞性质。"}]},{"ID":"20240516031057-ru7zrus","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-ru7zrus","updated":"20240516031057"},"Children":[{"ID":"20240516031057-9hswsrb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-9hswsrb","updated":"20240516031057"},"Children":[{"ID":"20240516031057-iqj03u5","Type":"NodeParagraph","Properties":{"id":"20240516031057-iqj03u5","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"Channel：通道，类似一个双向的 Stream，实现从 Buffer 读取数据或向 Buffer 写入数据"}]},{"ID":"20240516031057-d92lj15","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-d92lj15","updated":"20240516031057"},"Children":[{"ID":"20240516031057-nc8kwmk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-nc8kwmk","updated":"20240516031057"},"Children":[{"ID":"20240516031057-w9fovos","Type":"NodeParagraph","Properties":{"id":"20240516031057-w9fovos","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"文件：FileChannel"}]}]},{"ID":"20240516031057-2g6uuwc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-2g6uuwc","updated":"20240516031057"},"Children":[{"ID":"20240516031057-mazl9rj","Type":"NodeParagraph","Properties":{"id":"20240516031057-mazl9rj","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"UDP：DatagramChannel"}]}]},{"ID":"20240516031057-fnl6oxe","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-fnl6oxe","updated":"20240516031057"},"Children":[{"ID":"20240516031057-qcuuaos","Type":"NodeParagraph","Properties":{"id":"20240516031057-qcuuaos","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"TCO：SocketChannel、ServerSocketChannel"}]}]}]}]},{"ID":"20240516031057-8x9uipl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-8x9uipl","updated":"20240516031057"},"Children":[{"ID":"20240516031057-6hitd7y","Type":"NodeParagraph","Properties":{"id":"20240516031057-6hitd7y","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"Buffer：缓冲区，暂存读取到或待写入的数据"}]},{"ID":"20240516031057-sqbxd7a","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-sqbxd7a","updated":"20240516031057"},"Children":[{"ID":"20240516031057-s8xc1oe","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-s8xc1oe","updated":"20240516031057"},"Children":[{"ID":"20240516031057-urqmk1s","Type":"NodeParagraph","Properties":{"id":"20240516031057-urqmk1s","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"对应各个基本类型的 ByteBuffer，CharBuffer，IntBuffer，..."}]}]},{"ID":"20240516031057-j7hxq3r","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-j7hxq3r","updated":"20240516031057"},"Children":[{"ID":"20240516031057-6a7fyu0","Type":"NodeParagraph","Properties":{"id":"20240516031057-6a7fyu0","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"MappedByteBuffer"}]}]},{"ID":"20240516031057-90e3vea","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-90e3vea","updated":"20240516031057"},"Children":[{"ID":"20240516031057-2l33uc2","Type":"NodeParagraph","Properties":{"id":"20240516031057-2l33uc2","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"HeapByteBuffer"}]}]},{"ID":"20240516031057-ruekhp2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-ruekhp2","updated":"20240516031057"},"Children":[{"ID":"20240516031057-7x4bhap","Type":"NodeParagraph","Properties":{"id":"20240516031057-7x4bhap","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"DirectByteBuffer"}]}]}]}]},{"ID":"20240516031057-3lyxuaf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-3lyxuaf","updated":"20240516031057"},"Children":[{"ID":"20240516031057-k9lfp8b","Type":"NodeParagraph","Properties":{"id":"20240516031057-k9lfp8b","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"Selector：选择器，用于监听多个 Channel 的事件，实现 IO 复用（一个线程管理多组 IO 操作）"}]}]}]},{"ID":"20240516031118-ztvw9ze","Type":"NodeParagraph","Properties":{"id":"20240516031118-ztvw9ze","updated":"20240516031118"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"Pasted image 20230829233108"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/Pasted image 20230829233108-20240516031118-lfneng1.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240516031057-ji9gktv","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240516031057-ji9gktv","updated":"20240516031324"},"Children":[{"Type":"NodeText","Data":"文件读写"}]},{"ID":"20240516031057-ajunino","Type":"NodeParagraph","Properties":{"id":"20240516031057-ajunino","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"事实上，JDK 里传统文件读写 API、网络 API 都已经通过 NIO 重构过。"}]},{"ID":"20240516031057-h7vav2j","Type":"NodeParagraph","Properties":{"id":"20240516031057-h7vav2j","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"NIO 文件读写通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RandomAccessFile"},{"Type":"NodeText","Data":"​ 表示文件"}]},{"ID":"20240516031057-9atfl5g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-9atfl5g","updated":"20240516031058"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"try(/*文件*/ RandomAccessFile file = new RandomAccessFile(\"src/nio.txt\", \"rw\");\n    /*通道*/ FileChannel channel = file.getChannel()) {\n    // 申请接收文件内容的缓冲区\n    ByteBuffer buf = ByteBuffer.allocate(2048);\n    while (channel.read(buf) != -1) {\n        // 缓冲区复位\n        buf.flip();\n        // 读取缓冲区中的内容\n        while (buf.hasRemaining()) {\n            System.out.println((char) buf.get());\n        }\n        // 压缩缓冲区\n        buf.compact();\n    }\n} catch (IOException e) {\n    throw new RuntimeException(e);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516031057-5uqpbvq","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240516031057-5uqpbvq","updated":"20240516031324"},"Children":[{"Type":"NodeText","Data":"Buffer"}]},{"ID":"20240516031057-40hfaqr","Type":"NodeParagraph","Properties":{"id":"20240516031057-40hfaqr","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"Buffer 表示一个接收数据的缓冲区容器，存储 Channel 从文件、网络等地方读取的数据，或将 Buffer 中的数据发送到其他位置"}]},{"ID":"20240516031057-o55zc2b","Type":"NodeParagraph","Properties":{"id":"20240516031057-o55zc2b","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"Channel 与 Buffer 之间的通信："}]},{"ID":"20240516031057-3q80san","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-3q80san","updated":"20240516031058"},"Children":[{"ID":"20240516031057-b0534os","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-b0534os","updated":"20240516031057"},"Children":[{"ID":"20240516031057-tx3mta6","Type":"NodeParagraph","Properties":{"id":"20240516031057-tx3mta6","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"channel.read(buffer)"},{"Type":"NodeText","Data":"​ 表示从 Channel 中读数据到 Buffer"}]}]},{"ID":"20240516031057-3ya294k","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-3ya294k","updated":"20240516031057"},"Children":[{"ID":"20240516031057-m5x6hne","Type":"NodeParagraph","Properties":{"id":"20240516031057-m5x6hne","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"channel.write(buffer)"},{"Type":"NodeText","Data":"​ 表示 Channel 读 Buffer 中的数据"}]}]}]},{"ID":"20240516031057-lvv1l6c","Type":"NodeParagraph","Properties":{"id":"20240516031057-lvv1l6c","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"读写 Buffer 中的数据"}]},{"ID":"20240516031057-6li3hei","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-6li3hei","updated":"20240516031058"},"Children":[{"ID":"20240516031057-pemwrzs","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-pemwrzs","updated":"20240516031057"},"Children":[{"ID":"20240516031057-981w9nd","Type":"NodeParagraph","Properties":{"id":"20240516031057-981w9nd","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"buffer.get()"},{"Type":"NodeText","Data":"​ 表示从 Buffer 中读数据"}]}]},{"ID":"20240516031057-11shgj2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-11shgj2","updated":"20240516031057"},"Children":[{"ID":"20240516031057-9rcp3vu","Type":"NodeParagraph","Properties":{"id":"20240516031057-9rcp3vu","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"buffer.put(value)"},{"Type":"NodeText","Data":"​ 表示将数据写入 Buffer"}]}]}]},{"ID":"20240516031057-dyhddsb","Type":"NodeParagraph","Properties":{"id":"20240516031057-dyhddsb","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"位置标记：Buffer 内置几个位置标记表示当前缓冲区的读写位置"}]},{"ID":"20240516031057-e6lhc85","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-e6lhc85","updated":"20240516031058"},"Children":[{"ID":"20240516031057-vimyc9e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-vimyc9e","updated":"20240516031057"},"Children":[{"ID":"20240516031057-pv08ye0","Type":"NodeParagraph","Properties":{"id":"20240516031057-pv08ye0","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"capacity：缓冲区数组的总长度"}]}]},{"ID":"20240516031057-ro06nxg","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-ro06nxg","updated":"20240516031057"},"Children":[{"ID":"20240516031057-oqnzvvv","Type":"NodeParagraph","Properties":{"id":"20240516031057-oqnzvvv","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"position：表示下一个要操作的数据元素的位置"}]}]},{"ID":"20240516031057-vu24kk1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-vu24kk1","updated":"20240516031057"},"Children":[{"ID":"20240516031057-c0anoaq","Type":"NodeParagraph","Properties":{"id":"20240516031057-c0anoaq","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"limit：缓冲区数组中不可操作的下一个元素的位置，满足 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"limit\u0026lt;=capacity"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240516031057-3rjuog5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-3rjuog5","updated":"20240516031057"},"Children":[{"ID":"20240516031057-gtcifbf","Type":"NodeParagraph","Properties":{"id":"20240516031057-gtcifbf","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"mark：用于记录当前 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":"​ 的前一个位置，默认是 -1"}]}]}]},{"ID":"20240516031057-ta3e3eq","Type":"NodeParagraph","Properties":{"id":"20240516031057-ta3e3eq","updated":"20240516031133"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"Pasted image 20230829233807"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/Pasted image 20230829233807-20240516031133-v3yumzw.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240516031057-741dsf3","Type":"NodeParagraph","Properties":{"id":"20240516031057-741dsf3","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"除了直接操作标记位置，或 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"get"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"put"},{"Type":"NodeText","Data":"​ 方法，还有几个方法如下："}]},{"ID":"20240516031057-o9dy45w","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-o9dy45w","updated":"20240516031058"},"Children":[{"ID":"20240516031057-446i5lk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-446i5lk","updated":"20240516031057"},"Children":[{"ID":"20240516031057-2y9xyxl","Type":"NodeParagraph","Properties":{"id":"20240516031057-2y9xyxl","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"flip()"},{"Type":"NodeText","Data":"​：将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"limit"},{"Type":"NodeText","Data":"​ 设置成 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":"​ 的值，并将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":"​ 位置置 0"}]}]},{"ID":"20240516031057-cfdho9s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-cfdho9s","updated":"20240516031057"},"Children":[{"ID":"20240516031057-f8hgdzw","Type":"NodeParagraph","Properties":{"id":"20240516031057-f8hgdzw","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"clear()"},{"Type":"NodeText","Data":"​：将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"limit"},{"Type":"NodeText","Data":"​ 设置成 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"capacity"},{"Type":"NodeText","Data":"​，并将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":"​ 位置置 0"}]}]},{"ID":"20240516031057-eub9l9c","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-eub9l9c","updated":"20240516031057"},"Children":[{"ID":"20240516031057-x67ob89","Type":"NodeParagraph","Properties":{"id":"20240516031057-x67ob89","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"compact()"},{"Type":"NodeText","Data":"​：将所有未读数据拷贝到起始处，将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":"​ 置最后一个未读元素后，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"limit"},{"Type":"NodeText","Data":"​ 置为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"capacity"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240516031057-kzqk7kw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-kzqk7kw","updated":"20240516031057"},"Children":[{"ID":"20240516031057-wxnk91e","Type":"NodeParagraph","Properties":{"id":"20240516031057-wxnk91e","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"mark()"},{"Type":"NodeText","Data":"​ 方法记录当前 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"position"},{"Type":"NodeText","Data":"​ 位置，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"reset()"},{"Type":"NodeText","Data":"​ 方法可以恢复这个位置，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"rewind()"},{"Type":"NodeText","Data":"​ 可以清空记录"}]}]}]},{"ID":"20240516031057-9bqk87n","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240516031057-9bqk87n","updated":"20240516031324"},"Children":[{"Type":"NodeText","Data":"Socket"}]},{"ID":"20240516031057-hrp81ph","Type":"NodeParagraph","Properties":{"id":"20240516031057-hrp81ph","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"NIO 在 Socket 通信上，可以使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"configureBlocking(false)"},{"Type":"NodeText","Data":"​ 启用非阻塞特性，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"accept()"},{"Type":"NodeText","Data":"​ 方法将不会被阻塞。"}]},{"ID":"20240516031057-sk3h2cs","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-sk3h2cs","updated":"20240516031225"},"Children":[{"ID":"20240516031057-38tr7pq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-38tr7pq","updated":"20240516031057"},"Children":[{"ID":"20240516031057-9llr1wb","Type":"NodeParagraph","Properties":{"id":"20240516031057-9llr1wb","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"客户端代码 使用 NIO"}]},{"ID":"20240516031057-6c2fcrp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-6c2fcrp","updated":"20240516031057"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"ByteBuffer buffer = ByteBuffer.allocate(1024);\ntry(SocketChannel socketChannel = SocketChannel.open()) {\n    socketChannel.configureBlocking(false);\n    socketChannel.connect(new InetSocketAddress(\"127.0.0.1\", 8080));\n    if (socketChannel.finishConnect()) {\n        int i = 0;\n        while (true) {\n            TimeUnit.SECONDS.sleep(1);\n            buffer.clear();\n            buffer.put((\"The \" + (i++) + \"-th information from client\").getBytes());\n            buffer.flip();\n            while (buffer.hasRemaining()) {\n                socketChannel.write(buffer);\n            }\n        }\n    }\n} catch (IOException | InterruptedException e) {\n    throw new RuntimeException(e);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240516031215-7618n6f","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031215-7618n6f","updated":"20240516031225"},"Children":[{"ID":"20240516031215-30kblfc","Type":"NodeParagraph","Properties":{"id":"20240516031215-30kblfc","updated":"20240516031219"},"Children":[{"Type":"NodeText","Data":"服务端代码 使用传统 IO"}]},{"ID":"20240516031057-4b9ua82","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-4b9ua82","updated":"20240516031225"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"try(ServerSocket serverSocket = new ServerSocket(8080)) {\n    while (true) {\n        Socket socket = serverSocket.accept();\n        try(InputStream in = socket.getInputStream()) {\n            byte[] temp = new byte[1024];\n            int size = 0;\n            while ((size = in.read(temp)) != -1) {\n                // 已读取部分数据到 temp[]\n            }\n        }\n    }\n} catch (IOException e) {\n    throw new RuntimeException(e);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240516031057-hwpw5ko","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240516031057-hwpw5ko","updated":"20240516031324"},"Children":[{"Type":"NodeText","Data":"Selector"}]},{"ID":"20240516031057-4yodkvi","Type":"NodeParagraph","Properties":{"id":"20240516031057-4yodkvi","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"Selector 是选择器，一个选择器可以管理多个 IO 操作，即多个 Channel 对象。主要原因是 IO 操作通常会阻塞等待数据，且阻塞时间不需要 CPU 参与。"}]},{"ID":"20240516031057-b6zi96a","Type":"NodeParagraph","Properties":{"id":"20240516031057-b6zi96a","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"Selector 是一个多路开关，当一个 Channel 有一个 IO 操作时会通知 Selector，并触发对应操作。"}]},{"ID":"20240516031057-65q9isl","Type":"NodeParagraph","Properties":{"id":"20240516031057-65q9isl","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240516031235"},"Children":[{"Type":"NodeText","Data":"若一个 Selector 配合 Channel 使用，必须保证 Channel 是非阻塞状态的，即 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"configureBlocking(false)"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 的。"}]},{"ID":"20240516031057-eswrz5o","Type":"NodeParagraph","Properties":{"id":"20240516031057-eswrz5o","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"Selector 使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Selector.open()"},{"Type":"NodeText","Data":"​ 创建，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Channel#register"},{"Type":"NodeText","Data":"​ 方法注册。"}]},{"ID":"20240516031057-2hjpoi6","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-2hjpoi6","updated":"20240516031058"},"Children":[{"ID":"20240516031057-ytepvz3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-ytepvz3","updated":"20240516031057"},"Children":[{"ID":"20240516031057-swrw23j","Type":"NodeParagraph","Properties":{"id":"20240516031057-swrw23j","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"int ops"},{"Type":"NodeText","Data":"​：第二个参数，为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":"​ 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"OP_XXX"},{"Type":"NodeText","Data":"​ 的常数，通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"|"},{"Type":"NodeText","Data":"​ 连接"}]}]}]},{"ID":"20240516031057-kee5m42","Type":"NodeTable","TableAligns":[0,0],"Properties":{"colgroup":"|","id":"20240516031057-kee5m42","updated":"20240516031058"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"OP 标识"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"检查方法"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"OP_READ"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"isReadable()"},{"Type":"NodeText","Data":"​"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"OP_WRITE"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"isWritable()"},{"Type":"NodeText","Data":"​"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"OP_CONNECT"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"isConnectable()"},{"Type":"NodeText","Data":"​"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"OP_ACCEPT"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"isAcceptable()"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20240516031057-s41wvsx","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-s41wvsx","updated":"20240516031058"},"Children":[{"ID":"20240516031057-738oqgz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-738oqgz","updated":"20240516031057"},"Children":[{"ID":"20240516031057-ky0uuwz","Type":"NodeParagraph","Properties":{"id":"20240516031057-ky0uuwz","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Object att"},{"Type":"NodeText","Data":"​：第三个参数，绑定一个对象可在处理时使用"}]}]}]},{"ID":"20240516031057-3y8a35r","Type":"NodeParagraph","Properties":{"id":"20240516031057-3y8a35r","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"每次循环处理，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Selector#select()"},{"Type":"NodeText","Data":"​ 方法接收待处理的 Channel，之后使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Selector#selectedKeys"},{"Type":"NodeText","Data":"​ 获取所有待处理事件的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Set\u0026lt;SelectionKey\u0026gt;"},{"Type":"NodeText","Data":"​，处理完成后需要从其中手动删除。"}]},{"ID":"20240516031057-60kss1e","Type":"NodeTable","TableAligns":[0,0],"Properties":{"colgroup":"|","id":"20240516031057-60kss1e","updated":"20240516031058"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SelectionKey"},{"Type":"NodeText","Data":"​ 方法"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"说明"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"readyOps()"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Channel#register()"},{"Type":"NodeText","Data":"​ 中 ops 参数，但常用几个检查方法检查"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"attachment()"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Channel#register()"},{"Type":"NodeText","Data":"​ 中 att 参数"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"channel()"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Channel#register()"},{"Type":"NodeText","Data":"​ 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Channel"},{"Type":"NodeText","Data":"​ 对象"}]}]}]},{"ID":"20240516031057-ezygqo7","Type":"NodeParagraph","Properties":{"id":"20240516031057-ezygqo7","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240516031256"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"Selector#select()"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 方法阻塞等待 IO，且可以设置一个超时时间。若需要非阻塞直接返回，通过 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"selectNow()"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 方法。以上方法返回一个 int 表示待处理 Channel 的数量。"}]},{"ID":"20240516031057-cibq303","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-cibq303","updated":"20240516031058"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 准备多个通道\nSelectableChannel[] channels = new SelectableChannel[0];\ntry(Selector selector = Selector.open()) {\n    // 注册\n    for (SelectableChannel channel : channels) {\n        channel.register(selector, SelectionKey.OP_ACCEPT);\n    }\n  \n    // 轮询处理\n    while (true) {\n        // 是否有 IO 事件\n        if (selector.select(TIMEOUT) == 0) {\n            continue;\n        }\n    \n        // 处理\n        Set\u003cSelectionKey\u003e keys = selector.selectedKeys();\n        Iterator\u003cSelectionKey\u003e iter = keys.iterator();\n        while (iter.hasNext()) {\n            SelectionKey key = iter.next();\n        \n            if (key.isAcceptable()) {\n                // acceptable\n            }\n        \n            if (key.isReadable()) {\n                // readable\n            }\n        \n            if (key.isWritable() \u0026\u0026 key.isValid()) {\n                // writable\n            }\n        \n            if (key.isConnectable()) {\n                // connectable\n            }\n        \n            // 处理完成后，移除\n            iter.remove();\n        }\n    }\n} catch (IOException e) {\n    throw new RuntimeException(e);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516031057-22b7ghv","Type":"NodeParagraph","Properties":{"id":"20240516031057-22b7ghv","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"以 TCP 连接为例，一个服务端要处理多个客户端的请求，使用 NIO 处理"}]},{"ID":"20240516031057-jr7wzpo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-jr7wzpo","updated":"20240516031058"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 服务端\nclass ServerConnect {\n\n    // 缓冲区每次读数据大小\n    private static final int BUF_SIZE = 1024;\n    // 端口及超时\n    private static final int PORT = 8080;\n    private static final int TIMEOUT = 3000;\n\n    // 入口\n    public void selector() {\n        try (Selector selector = Selector.open();\n             ServerSocketChannel ssc = ServerSocketChannel.open()) {\n\n            // 配置服务端\n            ssc.socket().bind(new InetSocketAddress(PORT));\n            // 设置 Selector\n            ssc.configureBlocking(false);\n            ssc.register(selector, SelectionKey.OP_ACCEPT);\n\n            // 数据处理\n            while (true) {\n                // 超时\n                if (selector.select(TIMEOUT) == 0) {\n                    continue;\n                }\n\n                // 处理每个 Channel\n                Iterator\u003cSelectionKey\u003e itr = selector.selectedKeys().iterator();\n                while (itr.hasNext()) {\n                    SelectionKey key = itr.next();\n\n                    if (key.isAcceptable()) {\n                        handleAccept(key);\n                    }\n\n                    if (key.isReadable()) {\n                        handleRead(key);\n                    }\n\n                    if (key.isWritable() \u0026\u0026 key.isValid()) {\n                        handleWrite(key);\n                    }\n\n                    itr.remove();\n                }\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * 当消息第一次被接受时调用，直接转 Read，由 selector 方法注册\n     * @param key Channel Key\n     */\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel ssc = (ServerSocketChannel) key.channel();\n        SocketChannel sc = ssc.accept();\n        sc.configureBlocking(false);\n        // SelectionKey.OP_READ 表示 isReadable() = true\n        // 给定的 Object 可以通过 attachment() 获取\n        // SocketChannel 通过 channel() 获取\n        sc.register(key.selector(), \n                    SelectionKey.OP_READ,\n                    ByteBuffer.allocate(BUF_SIZE));\n    }\n\n    /**\n     * 当 Channel 被转发到去读方法时调用，由 handleAccept 中转发\n     * @param key Channel Key\n     */\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel sc = (SocketChannel) key.channel();\n        ByteBuffer buf = (ByteBuffer) key.attachment();\n        // 直接 print 到控制台\n        while (sc.read(buf) \u003e 0) {\n            buf.flip();\n            while (buf.hasRemaining()) {\n                System.out.println((char) buf.get());\n            }\n\n            buf.clear();\n        }\n    \n        // 读完后将待回复内容重新写入 Channel\n        buf.put(\"OK\".getBytes());\n        sc.register(key.selector(), SelectionKey.OP_WRITE, buf);\n    }\n\n    /**\n     * 当 Channel 被转发到写方法时调用，由 handleRead 中转发\n     * @param key Channel Key\n     */\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel sc = (SocketChannel) key.channel();\n        ByteBuffer buf = (ByteBuffer) key.attachment();\n        // 直接将 Buffer 里的内容传递到 Channel\n        buf.flip();\n        while (buf.hasRemaining()) {\n            sc.write(buf);\n        }\n        buf.compact();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516031057-q6s53ax","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240516031057-q6s53ax","updated":"20240516031324"},"Children":[{"Type":"NodeText","Data":"MappedByteBuffer"}]},{"ID":"20240516031057-hu0wvc5","Type":"NodeParagraph","Properties":{"id":"20240516031057-hu0wvc5","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MappedByteBuffer"},{"Type":"NodeText","Data":"​ 类用于内存映射，可以直接根据内存地址操作内存，对应操作系统的虚拟内存，可用于处理超大文件读写。"}]},{"ID":"20240516031057-ras81oq","Type":"NodeBlockquote","Properties":{"id":"20240516031057-ras81oq","updated":"20240516031324"},"Children":[{"ID":"20240516031057-501pi4u","Type":"NodeParagraph","Properties":{"id":"20240516031057-501pi4u","updated":"20240516031324"},"Children":[{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ByteBuffer"},{"Type":"NodeText","Data":"​ 有两种方案"}]},{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240516031057-cxo357d","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-cxo357d","updated":"20240516031057"},"Children":[{"ID":"20240516031057-xckxflw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-xckxflw","updated":"20240516031057"},"Children":[{"ID":"20240516031057-yk1anff","Type":"NodeParagraph","Properties":{"id":"20240516031057-yk1anff","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"间接模式：读写堆内存，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ByteBuffer"},{"Type":"NodeText","Data":"​ 的静态函数申请内存或包装数组都是这种模式"}]}]},{"ID":"20240516031057-xosywte","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-xosywte","updated":"20240516031057"},"Children":[{"ID":"20240516031057-epojcsj","Type":"NodeParagraph","Properties":{"id":"20240516031057-epojcsj","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"直接模式：直接读写操作系统的虚拟内存，无法直接创建，可以从其他 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Channel"},{"Type":"NodeText","Data":"​ 获取，如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"FileChannel"},{"Type":"NodeText","Data":"​ 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"map"},{"Type":"NodeText","Data":"​ 方法"}]}]}]}]},{"ID":"20240516031057-6yx0x35","Type":"NodeParagraph","Properties":{"id":"20240516031057-6yx0x35","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MappedByteBuffer"},{"Type":"NodeText","Data":"​ 对操作系统内存映射的文件进行读写可以省去一次数据复制过程，主要由于操作系统可以直接将文件映射为内存由 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MappedByteBuffer"},{"Type":"NodeText","Data":"​ 管理，而不需要将被映射区域再次复制到堆内存中。"}]},{"ID":"20240516031057-ecjq6tb","Type":"NodeParagraph","Properties":{"id":"20240516031057-ecjq6tb","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"跟用用处不同，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"map"},{"Type":"NodeText","Data":"​ 的第一个参数接收一个  Buffer 的行为"}]},{"ID":"20240516031057-lmwgiqz","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-lmwgiqz","updated":"20240516031058"},"Children":[{"ID":"20240516031057-38y6qcp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-38y6qcp","updated":"20240516031057"},"Children":[{"ID":"20240516031057-jleytxs","Type":"NodeParagraph","Properties":{"id":"20240516031057-jleytxs","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"READ_ONLY：只读"}]}]},{"ID":"20240516031057-75z06zs","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-75z06zs","updated":"20240516031057"},"Children":[{"ID":"20240516031057-3xjduak","Type":"NodeParagraph","Properties":{"id":"20240516031057-3xjduak","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"READ_WRITE：可读可写，更改会同步到文件中"}]}]},{"ID":"20240516031057-wlb6g68","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-wlb6g68","updated":"20240516031057"},"Children":[{"ID":"20240516031057-yuuw7dh","Type":"NodeParagraph","Properties":{"id":"20240516031057-yuuw7dh","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"PRIVATE：专用，可更改但不会影响到原始文件"}]}]}]},{"ID":"20240516031057-3kpcfxd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-3kpcfxd","updated":"20240516031058"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"try(RandomAccessFile file = new RandomAccessFile(\"...\", \"rw\");\n    FileChannel fc = file.getChannel()) {\n    MappedByteBuffer buf = fc.map(FileChannel.MapMode.READ_ONLY, 0, file.length());\n    // do something\n} catch (IOException e) {\n    throw new RuntimeException(e);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516031057-pivq1mf","Type":"NodeParagraph","Properties":{"id":"20240516031057-pivq1mf","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"相对于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ByteBuffer"},{"Type":"NodeText","Data":"​，扩展的方法包括："}]},{"ID":"20240516031057-agbroi2","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-agbroi2","updated":"20240516031058"},"Children":[{"ID":"20240516031057-6xn28m0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-6xn28m0","updated":"20240516031057"},"Children":[{"ID":"20240516031057-qrzqu90","Type":"NodeParagraph","Properties":{"id":"20240516031057-qrzqu90","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"force()"},{"Type":"NodeText","Data":"​：READ_WRITE 模式下，将缓冲区内的修改强制写回文件"}]}]},{"ID":"20240516031057-kj10fs9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-kj10fs9","updated":"20240516031057"},"Children":[{"ID":"20240516031057-u4z8ah1","Type":"NodeParagraph","Properties":{"id":"20240516031057-u4z8ah1","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"load()"},{"Type":"NodeText","Data":"​：将缓冲区的内容载入内存，并返回其引用"}]}]},{"ID":"20240516031057-r7r5hkw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-r7r5hkw","updated":"20240516031057"},"Children":[{"ID":"20240516031057-x3og4zv","Type":"NodeParagraph","Properties":{"id":"20240516031057-x3og4zv","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"isLoaded()"},{"Type":"NodeText","Data":"​：缓冲区内容是否已存在于物理内存中"}]}]}]},{"ID":"20240516031057-z4afkom","Type":"NodeParagraph","Properties":{"id":"20240516031057-z4afkom","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"通常，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MappedByteBuffer"},{"Type":"NodeText","Data":"​ 的销毁依赖于 GC，因此时间不确定"}]},{"ID":"20240516031057-i1reswj","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240516031057-i1reswj","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"Channel"}]},{"ID":"20240516031057-62jxgno","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240516031057-62jxgno","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"分散处理"}]},{"ID":"20240516031057-xpdlviy","Type":"NodeParagraph","Properties":{"id":"20240516031057-xpdlviy","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"当需要将来自同一个源的数据分散到多个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":"​ 中，各自处理后再输入到同一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Channel"},{"Type":"NodeText","Data":"​ 中，可使用接收数组的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"read"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"write"},{"Type":"NodeText","Data":"​ 方法"}]},{"ID":"20240516031057-hklx8za","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-hklx8za","updated":"20240516031058"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"try (FileChannel channel = FileChannel.open(null)) {\n    ByteBuffer[] bufs = new ByteBuffer[] {\n            ByteBuffer.allocate(1024),\n            ByteBuffer.allocate(1024)\n    };\n    channel.read(bufs);\n    channel.write(bufs);\n} catch (IOException e) {\n    throw new RuntimeException(e);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516031057-brgkaoc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240516031057-brgkaoc","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"transfer"}]},{"ID":"20240516031057-rq730pt","Type":"NodeParagraph","Properties":{"id":"20240516031057-rq730pt","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"FileChannel"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SocketChannel"},{"Type":"NodeText","Data":"​ 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"transferFrom"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"transferTo"},{"Type":"NodeText","Data":"​ 可将数据从直接在两个 Channel 之间传播"}]},{"ID":"20240516031057-3rzo345","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240516031057-3rzo345","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"Pipe"}]},{"ID":"20240516031057-j4m2o2n","Type":"NodeParagraph","Properties":{"id":"20240516031057-j4m2o2n","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"管道是两个线程甚至进程之间的单向数据传递方式，数据从 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Sink"},{"Type":"NodeText","Data":"​ 通道传递到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Source"},{"Type":"NodeText","Data":"​ 通道中。"}]},{"ID":"20240516031057-ppinlzk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-ppinlzk","updated":"20240516031058"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"try {\n    Pipe pipe = Pipe.open();\n    ExecutorService exec = Executors.newFixedThreadPool(2);\n    // 线程1 发送消息\n    exec.submit(() -\u003e {\n        try {\n            Pipe.SinkChannel sink = pipe.sink();\n            // 发送 10 条数据\n            for (int i = 0; i \u003c 10; i++) {\n                TimeUnit.SECONDS.sleep(1);\n                byte[] message = (\"Pipe message at \" + System.currentTimeMillis() + \"\\n\").getBytes();\n                ByteBuffer buffer = ByteBuffer.wrap(message);\n                while (buffer.hasRemaining()) {\n                    sink.write(buffer);\n                }\n            }\n        } catch (IOException | InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    });\n    // 线程2 接收消息\n    exec.submit(() -\u003e {\n        try {\n            Pipe.SourceChannel source = pipe.source();\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            while (true) {\n                source.read(buffer);\n                buffer.flip();\n                while (buffer.hasRemaining()) {\n                    System.out.print((char) buffer.get());\n                }\n                buffer.clear();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    });\n} catch (IOException e) {\n    throw new RuntimeException(e);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516031057-ik3pswt","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240516031057-ik3pswt","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"DatagramChannel"}]},{"ID":"20240516031057-2y2e4q1","Type":"NodeParagraph","Properties":{"id":"20240516031057-2y2e4q1","updated":"20240516031058"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DatagramChannel"},{"Type":"NodeText","Data":"​ 用于收发 UDP 包，发送和接收的是数据包"}]},{"ID":"20240516031057-efoupme","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-efoupme","updated":"20240516031058"},"Children":[{"ID":"20240516031057-04a0n92","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-04a0n92","updated":"20240516031057"},"Children":[{"ID":"20240516031057-fj3pktu","Type":"NodeParagraph","Properties":{"id":"20240516031057-fj3pktu","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"接收"}]}]}]},{"ID":"20240516031057-ly71frm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-ly71frm","updated":"20240516031058"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"DatagramChannel channel = DatagramChannel.open();\n\nByteBuffer buffer = ByteBuffer.allocate(1024);\nchannel.socket().bind(new InetSocketAddress(8080));\nchannel.receive(buffer);\nbuffer.flip();\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240516031057-ketfboc","Type":"NodeList","ListData":{},"Properties":{"id":"20240516031057-ketfboc","updated":"20240516031058"},"Children":[{"ID":"20240516031057-7yim6m8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240516031057-7yim6m8","updated":"20240516031057"},"Children":[{"ID":"20240516031057-ecnulc4","Type":"NodeParagraph","Properties":{"id":"20240516031057-ecnulc4","updated":"20240516031057"},"Children":[{"Type":"NodeText","Data":"发送"}]}]}]},{"ID":"20240516031057-yixjdg3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240516031057-yixjdg3","updated":"20240516031058"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"DatagramChannel channel = DatagramChannel.open();\n\nByteBuffer buffer = ByteBuffer.allocate(1024);\nbuffer.put(\"Message\".getBytes());\nbuffer.flip();\nchannel.send(buffer, new InetSocketAddress(8080));\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}
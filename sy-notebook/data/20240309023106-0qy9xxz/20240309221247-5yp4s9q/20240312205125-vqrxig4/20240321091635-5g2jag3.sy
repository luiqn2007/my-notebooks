{"ID":"20240321091635-5g2jag3","Spec":"1","Type":"NodeDocument","Properties":{"icon":"jclasslib256x256.png","id":"20240321091635-5g2jag3","title":"基于 JVMTI 加密","type":"doc","updated":"20240321135040"},"Children":[{"ID":"20240321091635-2ut6mud","Type":"NodeParagraph","Properties":{"id":"20240321091635-2ut6mud","style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);","updated":"20240321091806"},"Children":[{"Type":"NodeText","Data":"JVMTI：JVM Tools Interface，JVM 暴露出来的用户扩展接口集合，可实现性能监控、类文件转换、调试、热重载等功能"}]},{"ID":"20240321091811-k2rr0zx","Type":"NodeParagraph","Properties":{"id":"20240321091811-k2rr0zx","updated":"20240321091849"},"Children":[{"Type":"NodeText","Data":"JVMTI 有两种加载方式："}]},{"ID":"20240321091850-sn5cfdj","Type":"NodeList","ListData":{},"Properties":{"id":"20240321091850-sn5cfdj","updated":"20240321091850"},"Children":[{"ID":"20240321091850-d89bfmt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240321091850-d89bfmt","updated":"20240321091850"},"Children":[{"ID":"20240321091850-1y8q2u3","Type":"NodeParagraph","Properties":{"id":"20240321091850-1y8q2u3","updated":"20240321091915"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"-agentlib"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"-agentpath"},{"Type":"NodeText","Data":"​ 随 JVM 加载"}]}]},{"ID":"20240321091916-bur46se","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240321091916-bur46se"},"Children":[{"ID":"20240321091916-v7vg8uo","Type":"NodeParagraph","Properties":{"id":"20240321091916-v7vg8uo","updated":"20240321092005"},"Children":[{"Type":"NodeText","Data":"使用 Attach API 在运行时载入"}]}]}]},{"ID":"20240321092009-dgbtr0m","Type":"NodeParagraph","Properties":{"id":"20240321092009-dgbtr0m","updated":"20240321135033"},"Children":[{"Type":"NodeText","Data":"JVMTI 基于事件驱动，注册对应的事件即可。核心方法是 "},{"Type":"NodeTextMark","TextMarkType":"code inline-memo","TextMarkInlineMemoContent":"// 当通过命令方式随 JVM 加载时调用_esc_newline_JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved);","TextMarkTextContent":"Agent_OnLoad"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code inline-memo","TextMarkInlineMemoContent":"// 当通过 Attach API 加载时调用_esc_newline_JNIEXPORT jint JNICALL Agent_OnAttach(JavaVM *vm, char *options, void *reserved);_esc_newline_","TextMarkTextContent":"Agent_OnAttach"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code inline-memo","TextMarkInlineMemoContent":"// 当 Agent 卸载时调用_esc_newline_JNIEXPORT jint JNICALL Agent_UnLoad(JavaVM *vm);","TextMarkTextContent":"Agent_UnLoad"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240321092443-o8xz6vm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240321092443-o8xz6vm","updated":"20240321135040"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr"},{"Type":"NodeCodeBlockCode","Data":"#include \u003cjni.h\u003e\n#include \u003cjvmti.h\u003e\n#include \u003ccstring\u003e\n\n// 自定义事件回调\nvoid JNICALL MyClassFileLoadHookHandler(jvmtiEnv *jvmti_env, JNIEnv *jni_env,\n                                        jclass loaded_class, jobject classloader, const char *name,\n                                        jobject protection_domain, \n                                        jint class_data_len, const unsigned char *class_data,\n                                        jint *new_class_data_len, unsigned char **new_class_data) {\n    // do something\n}\n\n// 当通过命令方式随 JVM 加载时调用\nJNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *vm, char *options, void *reserved) {\n    jvmtiEnv *jvmti_env;\n    jvmtiError error;\n    jvmtiEventCallbacks callbacks;\n    int ret;\n  \n    // 获取 JVMIT Environment\n    if ((ret = vm-\u003eGetEnv((void **)\u0026jvmti_env, JVMTI_VERSION)) != JNI_OK) {\n        return ret;\n    }\n    // 设置类加载事件回调\n    memset(\u0026callbacks, 0, sizeof callbacks);\n    callbacks.ClassFileLoadHook = \u0026MyClassFileLoadHookHandler;\n    error = jvmti_env-\u003eSetEventCallbacks(\u0026callbacks, sizeof callbacks);\n    if (error != JVMTI_ERROR_NONE) {\n        return error;\n    }\n    return JNI_OK;\n}\n\n// 当通过 Attach API 加载时调用\nJNIEXPORT jint JNICALL Agent_OnAttach(JavaVM *vm, char *options, void *reserved) {\n    return JNI_OK;\n}\n\n// 当 Agent 卸载时调用\nJNIEXPORT jint JNICALL Agent_UnLoad(JavaVM *vm) {\n    return JNI_OK;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240321135037-j1k4uci","Type":"NodeParagraph","Properties":{"id":"20240321135037-j1k4uci"}}]}
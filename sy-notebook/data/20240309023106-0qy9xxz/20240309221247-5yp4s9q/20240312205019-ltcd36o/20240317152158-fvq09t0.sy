{"ID":"20240317152158-fvq09t0","Spec":"1","Type":"NodeDocument","Properties":{"icon":"jclasslib256x256.png","id":"20240317152158-fvq09t0","title":"协程的实现原理","type":"doc","updated":"20240317203340"},"Children":[{"ID":"20240317152158-widd8wd","Type":"NodeParagraph","Properties":{"id":"20240317152158-widd8wd","updated":"20240317184124"},"Children":[{"Type":"NodeText","Data":"Kotlin 协程（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"coroutine"},{"Type":"NodeText","Data":"​）通过魔改的 CPS 实现"}]},{"ID":"20240317183944-mrm43yb","Type":"NodeBlockquote","Properties":{"id":"20240317183944-mrm43yb","updated":"20240317184719"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240317184058-8jtnpyl","Type":"NodeParagraph","Properties":{"id":"20240317184058-8jtnpyl","updated":"20240317184243"},"Children":[{"Type":"NodeText","Data":"CPS 模式：Continuation Passing Style，函数执行完后，不通过 return 返回，而是将返回值作为参数，调用下一个任务函数（Continuation）"}]},{"ID":"20240317184235-t29gj0j","Type":"NodeParagraph","Properties":{"id":"20240317184235-t29gj0j","updated":"20240317184314"},"Children":[{"Type":"NodeText","Data":"CPS 方法都会有一个额外的 Continuation 变量，表示完成后要执行的代码，又称回调函数"}]},{"ID":"20240317184320-chxlu4s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240317184320-chxlu4s","updated":"20240317184719"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"a290bGlu"},{"Type":"NodeCodeBlockCode","Data":"fun sum(a: Int, b: Int, cont: (Int) -\u003e Unit) = cont(a + b)\nfun double(x: Int, cont: (Int) -\u003e Unit) = cont(x * 2)\nfun print(x: Int, cont: (Unit) -\u003e Unit) = cont(print(x))\n\nfun printDoubleSum(a: Int, b: Int) {\n    sum(a, b) {\n        double(it) {\n            print(it) {}\n        }\n    }\n}\n\nfun main() {\n    printDoubleSum(10, 20)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240317184726-768v3j1","Type":"NodeParagraph","Properties":{"id":"20240317184726-768v3j1","updated":"20240317193204"},"Children":[{"Type":"NodeText","Data":"Kotlin 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"suspend"},{"Type":"NodeText","Data":"​ 关键字实际上就是将一个函数转化为一个 CPS 函数，在每个函数后加一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Continuation\u0026lt;T\u0026gt;"},{"Type":"NodeText","Data":"​ 类型的参数："}]},{"ID":"20240317184814-2jzcl64","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240317184814-2jzcl64","updated":"20240317203335"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"a290bGlu"},{"Type":"NodeCodeBlockCode","Data":"data class User(val token: String)\n\nsuspend fun getTokenByLogin(username: String, password: String) : String = \"$username:$password\"\n\nsuspend fun getUserInfo(token: String) : User = User(token)\n\nfun progressUserInfo(user: User) {}\n\nsuspend fun foo() {\n    val token = getTokenByLogin(\"Zhang\", \"1234\")\n    val user = getUserInfo(token)\n    progressUserInfo(user)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240317184909-771c6vb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240317184909-771c6vb","updated":"20240317203323"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"a290bGlu"},{"Type":"NodeCodeBlockCode","Data":"suspend fun foo() {\n    getTokenByLogin(\"Zhang\", \"1234\", object : Continuation\u003cString\u003e {\n        override fun resumeWith(result: Result\u003cString\u003e) {\n            val token = result.getOrNull()\n            getUserInfo(token, object : Continuation\u003cUser\u003e {\n                override fun resumeWith(result: Result\u003cUser\u003e) {\n                    val user = result.getOrNull()\n                    progressUserInfo(user)\n                }\n            })\n        }\n    })\n    val user = getUserInfo(token)\n    progressUserInfo(user)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240317192643-jutcc2d","Type":"NodeParagraph","Properties":{"id":"20240317192643-jutcc2d","updated":"20240317201653"},"Children":[{"Type":"NodeText","Data":"Kotlin 中每个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"suspend"},{"Type":"NodeText","Data":"​ 都对应一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Continuation"},{"Type":"NodeText","Data":"​ 实现，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Continuation"},{"Type":"NodeText","Data":"​ 通过状态机实现，编译器将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"suspend"},{"Type":"NodeText","Data":"​ 方法替换为状态机的一部分，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"suspend"},{"Type":"NodeText","Data":"​ 通过不同状态间传递 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Continuation"},{"Type":"NodeText","Data":"​ 实现协程切换"}]},{"ID":"20240317202922-bonz3zp","Type":"NodeBlockquote","Properties":{"id":"20240317202922-bonz3zp","updated":"20240317203257"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240317202922-a2zkv6e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240317202922-a2zkv6e","updated":"20240317203105"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"a290bGlu"},{"Type":"NodeCodeBlockCode","Data":"interface Result\u003cout T\u003e {\n    public val value: T\n    public val isSuccess        : Boolean\n    public val isFailure        : Boolean\n    public fun exceptionOrNull(): Throwable?\n    public fun getOrNull()      : T?\n    public fun getOrThrow()     : T \n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240317203112-fzrv60h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240317203112-fzrv60h","updated":"20240317203257"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"a290bGlu"},{"Type":"NodeCodeBlockCode","Data":"interface Continuation\u003cin T\u003e {\n    public val context: CoroutineContext\n    public fun resumeWith(result: Result\u003cT\u003e)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240317201713-1kkmyjz","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240317201713-1kkmyjz","updated":"20240317201714"},"Children":[{"ID":"20240317201714-p18gjix","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240317201714-p18gjix","updated":"20240317201714"},"Children":[{"ID":"20240317201714-i5uakj8","Type":"NodeParagraph","Properties":{"id":"20240317201714-i5uakj8","updated":"20240317201717"},"Children":[{"Type":"NodeText","Data":"打标签"}]}]}]},{"ID":"20240317201717-4ji6s81","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240317201717-4ji6s81","updated":"20240317201756"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"a290bGlu"},{"Type":"NodeCodeBlockCode","Data":"suspend fun foo() {\n    val token = getTokenByLogin(\"Zhang\", \"1234\") // 挂起点 1\n    val a = 100\n    val user = getUserInfo(token)                // 挂起点 2\n    progressUserInfo(user)\n    println(a)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240317201542-ee0j5ko","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240317201542-ee0j5ko","updated":"20240317202915"},"Children":[{"ID":"20240317201802-lxb1b68","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240317201802-lxb1b68","updated":"20240317202915"},"Children":[{"ID":"20240317201802-kvbmuvt","Type":"NodeParagraph","Properties":{"id":"20240317201802-kvbmuvt","updated":"20240317202915"},"Children":[{"Type":"NodeText","Data":"实现状态机，Kotlin 协程的原理就是每个挂起点和初始起点的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Continuation"},{"Type":"NodeText","Data":"​ 都会转为状态机的一种状态，协程切换只是切换一个状态机的状态，使用 CPS 传递协程上下文。"}]}]}]},{"ID":"20240317201813-mzvvecg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240317201813-mzvvecg","updated":"20240317202337"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"a290bGlu"},{"Type":"NodeCodeBlockCode","Data":"fun foo(cont: Continuation\u003cString\u003e) {\n    val sm = ContinuationImpl()  // sm.label 初始值为 1\n    when (sm.label) {\n        0 -\u003e {\n            sm.label = 1          // 更新状态\n            getTokenByLogin(\"Zhang\", \"1234\", sm)\n        }\n        1 -\u003e {\n            sm.label = 2          // 更新状态\n            val a = 100\n            sm.`$a` = a           // 保存状态\n            val token = sm.result // 上一个状态的结果\n            getUserInfo(token)\n        }\n        2 -\u003e {\n            val user = sm.result\n            progressUserInfo(user)\n            val a = sm.`$a`       // 恢复状态\n            println(a)\n            return\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240317203340-a5xd4mi","Type":"NodeParagraph","Properties":{"id":"20240317203340-a5xd4mi"}}]}
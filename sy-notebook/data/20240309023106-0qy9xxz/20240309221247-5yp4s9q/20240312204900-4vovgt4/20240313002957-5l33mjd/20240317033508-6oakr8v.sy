{"ID":"20240317033508-6oakr8v","Spec":"1","Type":"NodeDocument","Properties":{"icon":"jclasslib256x256.png","id":"20240317033508-6oakr8v","title":"反射的原理","type":"doc","updated":"20240317102230"},"Children":[{"ID":"20240317033508-beurw31","Type":"NodeParagraph","Properties":{"id":"20240317033508-beurw31","updated":"20240317095323"},"Children":[{"Type":"NodeText","Data":"反射是 Java 核心特性之一，允许在运行时动态调用某个对象的方法、创建实例、获取属性等。"}]},{"ID":"20240317095804-37zbufe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240317095804-37zbufe","updated":"20240317095807"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"private static int count;\npublic static void foo() {\n    new Exception(\"Test #\" + (count++)).printStackTrace();\n}\npublic static void main(String[] args) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {\n    Class\u003cMain\u003e aClass = Main.class;\n    Method foo = aClass.getMethod(\"foo\");\n    for (int i = 0; i \u003c 20; i++) {\n        foo.invoke(null);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240317095808-1xnjofr","Type":"NodeParagraph","Properties":{"id":"20240317095808-1xnjofr","updated":"20240317095856"},"Children":[{"Type":"NodeText","Data":"我们通过每次反射调用时输出调用栈可以看到反射的调用过程："}]},{"ID":"20240317095857-pyhonm0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240317095857-pyhonm0","updated":"20240317095909"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"java.lang.Exception: Test #0\n\tat org.example.Main.foo(Main.java:12)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240317095911-1equyy7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240317095911-1equyy7","updated":"20240317095927"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"java.lang.Exception: Test #16\n\tat org.example.Main.foo(Main.java:12)\n\tat jdk.internal.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.example.Main.main(Main.java:19)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240317095959-rqxpnp7","Type":"NodeParagraph","Properties":{"id":"20240317095959-rqxpnp7","updated":"20240317101436"},"Children":[{"Type":"NodeText","Data":"可以看到，前 15 次通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NativeMethodAccessorImpl.invoke0"},{"Type":"NodeText","Data":"​ 访问，这是一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"native"},{"Type":"NodeText","Data":"​ 方法。调用次数多了，触发 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"inflation"},{"Type":"NodeText","Data":"​ 机制，由 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"GeneratedMethodAccessor"},{"Type":"NodeText","Data":"​ 创建 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"GeneratedMethodAccessor1"},{"Type":"NodeText","Data":"​ 类完成调用。"}]},{"ID":"20240317101610-ol4yiwk","Type":"NodeParagraph","Properties":{"id":"20240317101610-ol4yiwk","style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);","updated":"20240317101741"},"Children":[{"Type":"NodeText","Data":"通过 JNI native 调用会比动态生成类慢 20 倍左右，但动态生成类第一次生成字节码又比反射慢 3-4 倍，因此调用次数较少的情况下生成字节码反而更慢"}]},{"ID":"20240317101839-au41jsu","Type":"NodeParagraph","Properties":{"id":"20240317101839-au41jsu","style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);","updated":"20240317102230"},"Children":[{"Type":"NodeText","Data":"调整 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"inflation"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​ 阈值的参数有两个："},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"sun.reflect.inflationThreshold"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​ 默认 15，即触发的阈值；"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"sun.reflect.noInflation"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​ 默认 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"false"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​，设置为 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"true"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​ 可以禁用 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);"},"TextMarkType":"code","TextMarkTextContent":"inflation"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240317100347-gyk4tma","Type":"NodeParagraph","Properties":{"id":"20240317100347-gyk4tma","updated":"20240317101318"},"Children":[{"Type":"NodeText","Data":"通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"arthas"},{"Type":"NodeText","Data":"​ 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"jad"},{"Type":"NodeText","Data":"​ 反编译 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"GeneratedMethodAccessor1"},{"Type":"NodeText","Data":"​，忽略异常处理，其结果为："}]},{"ID":"20240317101223-kg5ho2u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240317101223-kg5ho2u","updated":"20240317101313"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"package jdk.internal.reflect;\n\nimport java.lang.reflect.InvocationTargetException;\nimport jdk.internal.reflect.MethodAccessorImpl;\nimport org.example.Main;\n\npublic class GeneratedMethodAccessor1 extends MethodAccessorImpl {\n    /*\n     * Loose catch block\n     */\n    public Object invoke(Object object, Object[] objectArray) throws InvocationTargetException {\n        // 忽略异常处理\n        Main.foo();\n        return null;\n        // 忽略异常处理\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240317101827-3jb81ko","Type":"NodeParagraph","Properties":{"id":"20240317101827-3jb81ko","updated":"20240317101836"}}]}
{"ID":"20240316011020-v4x83a6","Spec":"1","Type":"NodeDocument","Properties":{"icon":"jclasslib256x256.png","id":"20240316011020-v4x83a6","title":"invokevirtual 指令","type":"doc","updated":"20240316015359"},"Children":[{"ID":"20240316011020-yzdw3w7","Type":"NodeParagraph","Properties":{"id":"20240316011020-yzdw3w7","updated":"20240316012045"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"invokevirtual"},{"Type":"NodeText","Data":"​ 指令用于调用普通实例方法，目标方法在运行时根据对象实例确定，类似 C++ 虚方法，需要先将函数所在对象入栈。"}]},{"ID":"20240316013535-qav5pka","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240316013535-qav5pka","updated":"20240316013535"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"class Color {\n    public void printColorName() {\n        Color red = new Red();\n        Color yellow = new Yellow();\n        foo(red);\n        foo(yellow);\n    }\n\n    public static void foo(Color color) {\n        color.printColorName();\n    }\n}\n\nclass Red extends Color {\n    @Override\n    public void printColorName() {\n        System.out.println(\"Red\");\n    }\n}\n\nclass Yellow extends Color {\n    @Override\n    public void printColorName() {\n        System.out.println(\"Yellow\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240316013700-mkh35ih","Type":"NodeParagraph","Properties":{"id":"20240316013700-mkh35ih","updated":"20240316013703"},"Children":[{"Type":"NodeText","Data":"编译后结果为："}]},{"ID":"20240316013704-ttlj98c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240316013704-ttlj98c","ligatures":"false","linenumber":"true","linewrap":"false","updated":"20240316014258"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// Color.class\npublic void printColorName();\n  descriptor: ()V\n  Code:\n    new           #7  // class org/example/Red 创建 Red 对象\n    dup\n    invokespecial #9  // Method org/example/Red.\u003cinit\u003e: ()V 调用构造函数\n    astore_1          // 将新建的 Red 对象存一下\n    ...               // 此处省略创建 Yellow 对象的操作\n    aload_1\n    invokestatic  #13 // Method foo:(Lorg/example/Color;)V 调用函数\n    aload_2\n    invokestatic  #13 // Method foo:(Lorg/example/Color;)V 调用函数\n    return\n\npublic static void foo(ory.example.Color);\n  descriptor: (Lorg/example/Color;)V\n  Code:\n    aload_0\n    invokevirtual #19 // Method printColorName:()V\n    return\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240316013842-227m2wv","Type":"NodeParagraph","Properties":{"id":"20240316013842-227m2wv","updated":"20240316015359"},"Children":[{"Type":"NodeText","Data":"上面例子中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"foo"},{"Type":"NodeText","Data":"​ 函数调用了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Color#printColorName"},{"Type":"NodeText","Data":"​ 方法，但其目标方法却不一定，需要通过对象的实际类型进行分派"}]}]}
{"ID":"20240318004443-1wagn4a","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f630","id":"20240318004443-1wagn4a","title":"CoreAPI","updated":"20240318122107"},"Children":[{"ID":"20240318021026-ljjk7iv","Type":"NodeParagraph","Properties":{"id":"20240318021026-ljjk7iv","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240318021036"},"Children":[{"Type":"NodeText","Data":"Maven 库："},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"org.ow2.asm:asm"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240318004443-oa6f4z9","Type":"NodeParagraph","Properties":{"id":"20240318004443-oa6f4z9","updated":"20240318004634"},"Children":[{"Type":"NodeText","Data":"在使用 CoreAPI 时，最重要的三个类是 ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassReader"},{"Type":"NodeText","Data":"​，","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassVisitor"},{"Type":"NodeText","Data":"​，","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassWriter"},{"Type":"NodeText","Data":"​。","Properties":{"id":""}}]},{"ID":"20240318004635-rja70qu","Type":"NodeParagraph","Properties":{"id":"20240318004635-rja70qu","updated":"20240318005537"},"Children":[{"Type":"NodeText","Data":"​","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassReader"},{"Type":"NodeText","Data":"​ 是字节码读取和分析引擎，负责解析 class 文件，采用类似 SAX 的方式，在事件发生时触发相对的 ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassVisitor"},{"Type":"NodeText","Data":"​、","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MethodVisitor"},{"Type":"NodeText","Data":"​ 等处理器","Properties":{"id":""}}]},{"ID":"20240318005537-10lnbb9","Type":"NodeParagraph","Properties":{"id":"20240318005537-10lnbb9","updated":"20240318010546"},"Children":[{"Type":"NodeText","Data":"​","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassVisitor"},{"Type":"NodeText","Data":"​ 是一个抽象类，在 ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassReader.accept()"},{"Type":"NodeText","Data":"​ 处使用。","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassReader"},{"Type":"NodeText","Data":"​ 在读取","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-memo","TextMarkInlineMemoContent":"调用顺序：_esc_newline_[visit] 1次_esc_newline_[visitSource] 0或1次_esc_newline_[visitOuterClass] 0或1次_esc_newline_[visitAnnotation | visitAttribute] 任意次_esc_newline_[visitInnerClass | visitField | visitMethod] 任意次_esc_newline_[visitEnd] 1次","TextMarkTextContent":"不同节点"},{"Type":"NodeText","Data":"时会调用 ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassVisitor"},{"Type":"NodeText","Data":"​ 的不同 ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"visitor"},{"Type":"NodeText","Data":"​ 方法。","Properties":{"id":""}}]},{"ID":"20240318010224-2ewopn0","Type":"NodeParagraph","Properties":{"id":"20240318010224-2ewopn0","updated":"20240318010721"},"Children":[{"Type":"NodeText","Data":"​","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassWriter"},{"Type":"NodeText","Data":"​ 是 ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ClassVisitor"},{"Type":"NodeText","Data":"​ 的一个实现类，增加了 ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"toByteArray"},{"Type":"NodeText","Data":"​ 方法可以直接获取 class 字节码数组","Properties":{"id":""}}]},{"ID":"20240318010737-wgpzcin","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318010737-wgpzcin","updated":"20240318013701"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"bWVybWFpZA=="},{"Type":"NodeCodeBlockCode","Data":"sequenceDiagram\nparticipant App\nparticipant ClassReader\nparticipant ClassVisitor\n\nApp -\u0026gt;\u0026gt; ClassReader: accept\nClassReader -\u0026gt;\u0026gt; ClassVisitor: visit\nClassReader -\u0026gt;\u0026gt; ClassVisitor: visitSource\nClassReader -\u0026gt;\u0026gt; ClassVisitor: visitOuterClass\n\nloop Anno\u0026amp;Attr\nactivate ClassReader\nactivate ClassVisitor\nClassReader -\u0026gt;\u0026gt; ClassVisitor: visitAnnotation\nClassVisitor -\u0026gt;\u0026gt; AnnotationVisitor: visit*\ndeactivate ClassVisitor\nClassReader -\u0026gt;\u0026gt; ClassVisitor: visitAttribute\ndeactivate ClassReader\nend\n\nloop InnerClass\u0026amp;Field\u0026amp;Method\nactivate ClassReader\nClassReader -\u0026gt;\u0026gt; ClassVisitor: visitInnerClass\nactivate ClassVisitor\nClassReader -\u0026gt;\u0026gt; ClassVisitor: visitField\nClassVisitor -\u0026gt;\u0026gt; FieldVisitor: visit*\ndeactivate ClassVisitor\nactivate ClassVisitor\nClassReader -\u0026gt;\u0026gt; ClassVisitor: visitMethod\nClassVisitor -\u0026gt;\u0026gt; MethodVisitor: visit*\ndeactivate ClassVisitor\ndeactivate ClassReader\nend"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240318013340-s5zi8wo","Type":"NodeList","ListData":{},"Properties":{"id":"20240318013340-s5zi8wo","updated":"20240318042945"},"Children":[{"ID":"20240318015815-jq55vds","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240318015815-jq55vds","updated":"20240318015815"},"Children":[{"ID":"20240318015815-kmp05jz","Type":"NodeParagraph","Properties":{"id":"20240318015815-kmp05jz","updated":"20240318015846"},"Children":[{"Type":"NodeText","Data":"例：输出类的方法和字段"}]},{"ID":"20240318020021-qyafecf","Type":"NodeSuperBlock","Properties":{"id":"20240318020021-qyafecf"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240318020143-p1nurxh","Type":"NodeSuperBlock","Properties":{"id":"20240318020143-p1nurxh"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"row"},{"ID":"20240318015944-2lz0t5u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318015944-2lz0t5u","updated":"20240318031438"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 当前类\npublic class MyClass {\n    public int a = 0;\n    public int b = 1;\n    public void test01() {}\n    public void test02() {}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240318020134-oovkvik","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318020134-oovkvik","updated":"20240318020140"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"Field: a\nField: b\nMethod: \u003cinit\u003e\nMethod: test01\nMethod: test02\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240318015950-m1ioppk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318015950-m1ioppk","updated":"20240318022031"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"byte[] bytes = Files.readAllBytes(...);\nClassReader cr = new ClassReader(bytes);\n// ASM9 指的是使用的 ASM 版本，\nClassVisitor cv = new ClassVisitor(Opcodes.ASM9) {\n    @Override\n    public FieldVisitor visitField(int access, String name, String descriptor, \n                                   String signature, Object value) {\n        System.out.println(\"Field: \" + name);\n        return super.visitField(access, name, descriptor, signature, value);\n    }\n    @Override\n    public MethodVisitor visitMethod(int access, String name, String descriptor, \n                                     String signature, String[] exceptions) {\n        System.out.println(\"Method: \" + name);\n        return super.visitMethod(access, name, descriptor, signature, exceptions);\n    }\n};\ncr.accept(cv, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240318020205-fr83fev","Type":"NodeParagraph","Properties":{"id":"20240318020205-fr83fev","updated":"20240318020604"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ClassReader"},{"Type":"NodeText","Data":"​ 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"accept"},{"Type":"NodeText","Data":"​ 第二个参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"flags"},{"Type":"NodeText","Data":"​ 是一个位掩码，可选以下值："}]},{"ID":"20240318020604-cv67ybq","Type":"NodeTable","TableAligns":[0,0],"Properties":{"colgroup":"min-width: 60px;|min-width: 60px;","id":"20240318020604-cv67ybq","updated":"20240318020733"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"值"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"说明"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"SKIP_DEBUG"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"跳过调试信息（行号等）"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"SKIP_CODE"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"跳过 Code 属性（方法字节码、异常表等）"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"EXPAND_FRAMES"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"展开 StackMapTable 属性"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"SKIP_FRAMES"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"跳过 StackMapTable 属性"}]}]}]}]},{"ID":"20240318015839-rl28v4p","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240318015839-rl28v4p","updated":"20240318042945"},"Children":[{"ID":"20240318015839-9pi9b0b","Type":"NodeParagraph","Properties":{"id":"20240318015839-9pi9b0b","updated":"20240318021904"},"Children":[{"Type":"NodeText","Data":"例：新增字段和方法"}]},{"ID":"20240318031915-8y9dlfj","Type":"NodeSuperBlock","Properties":{"id":"20240318031915-8y9dlfj","updated":"20240318032908"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240318031907-lhsfd74","Type":"NodeSuperBlock","Properties":{"id":"20240318031907-lhsfd74","updated":"20240318032908"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"row"},{"ID":"20240318021905-buil1j7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318021905-buil1j7","updated":"20240318031908"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class MyClass {\n    public int a = 0;\n    public int b = 1;\n    public void test01() {}\n    public void test02() {}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240318032142-up2ux2v","Type":"NodeParagraph","Properties":{"id":"20240318032142-up2ux2v","updated":"20240318032650"},"Children":[{"Type":"NodeText","Data":"通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"visitXxx"},{"Type":"NodeText","Data":"​ 方法可以向类中增加元素。可以选择在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"visit()"},{"Type":"NodeText","Data":"​ 方法中添加，也可以选择在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"visitEnd()"},{"Type":"NodeText","Data":"​ 中添加。"}]},{"ID":"20240318032743-xkggryd","Type":"NodeParagraph","Properties":{"id":"20240318032743-xkggryd","updated":"20240318032908"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ClassVisitor"},{"Type":"NodeText","Data":"​ 构造函数第二个参数可以传入另一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ClassVisitor"},{"Type":"NodeText","Data":"​，用于组合多个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ClassVisitor"},{"Type":"NodeText","Data":"​。这里传入了用于输出的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ClassWriter"},{"Type":"NodeText","Data":"​ 对象"}]},{"ID":"20240318031847-ipbg8x9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318031847-ipbg8x9","updated":"20240318032021"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class MyClass {\n    public int a = 0;\n    public int b = 1;\n    public static final String xyz;\n    public void test01() {}\n    public void test02() {}\n    public void foo(int var1, String var2) {\n        System.out.println(new StringBuilder()\n                            .append(var1)\n                            .append(var2)\n                            .toString());\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240318031857-780j762","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318031857-780j762","updated":"20240318032122"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"ClassReader cr = new ClassReader(bytes);\nClassWriter cw = new ClassWriter(0);\nClassVisitor cv = new ClassVisitor(ASM9, cw) {\n    @Override\n    public void visit(int version, int access, String name, String signature,\n                      String superName, String[] interfaces) {\n        super.visit(version, access, name, signature, superName, interfaces);\n    }\n    @Override\n    public void visitEnd() {\n        // public static final String xyz;\n        FieldVisitor xyz = visitField(ACC_PUBLIC | ACC_STATIC | ACC_FINAL,\n                                      \"xyz\", \"Ljava/lang/String;\", null, null);\n        xyz.visitEnd();\n        // public void foo(int, String);\n        MethodVisitor foo = visitMethod(ACC_PUBLIC, \"foo\", \"(ILjava/lang/String;)V\", null, null);\n        // sb = new StringBuilder();\n        foo.visitTypeInsn(NEW, \"java/lang/StringBuilder\");\n        foo.visitInsn(DUP);\n        foo.visitMethodInsn(INVOKESPECIAL, \"java/lang/StringBuilder\",\n                            \"\u003cinit\u003e\", \"()V\", false);\n        // sb.append(i);\n        foo.visitVarInsn(ILOAD, 1);\n        foo.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/StringBuilder\",\n                            \"append\", \"(I)Ljava/lang/StringBuilder;\", false);\n        // sb.append(s);\n        foo.visitVarInsn(ALOAD, 2);\n        foo.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/StringBuilder\",\n                            \"append\", \"(Ljava/lang/String;)Ljava/lang/StringBuilder;\", false);\n        // sb.toString();\n        foo.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/StringBuilder\",\n                            \"toString\", \"()Ljava/lang/StringBuilder;\", false);\n        // System.out.println(s)\n        foo.visitFieldInsn(GETSTATIC, \"java/lang/System\",\n                           \"out\", \"java/io/PrintStream\");\n        foo.visitInsn(SWAP);\n        foo.visitMethodInsn(INVOKEVIRTUAL, \"java/lang/PrintStream\",\n                            \"println\", \"(Ljava/lang/String;)V\", false);\n        foo.visitEnd();\n        super.visitEnd();\n    }\n};\ncr.accept(cv, ClassReader.SKIP_DEBUG);\nreturn cw.toByteArray();\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]}]}]},{"ID":"20240318031842-nnfy712","Type":"NodeList","ListData":{},"Properties":{"id":"20240318031842-nnfy712","updated":"20240318122107"},"Children":[{"ID":"20240318015907-jly8495","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240318015907-jly8495","updated":"20240318122107"},"Children":[{"ID":"20240318015907-v65rjxe","Type":"NodeParagraph","Properties":{"id":"20240318015907-v65rjxe","updated":"20240318041656"},"Children":[{"Type":"NodeText","Data":"例：移除方法和字段，修改方法内容"}]},{"ID":"20240318034830-wxlufon","Type":"NodeSuperBlock","Properties":{"id":"20240318034830-wxlufon","updated":"20240318034830"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"col"},{"ID":"20240318034830-kv1yyzx","Type":"NodeSuperBlock","Properties":{"id":"20240318034830-kv1yyzx","updated":"20240318034830"},"Children":[{"Type":"NodeSuperBlockOpenMarker"},{"Type":"NodeSuperBlockLayoutMarker","Data":"row"},{"ID":"20240318034830-1zvmjhc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318034830-1zvmjhc","updated":"20240318034830"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class MyClass {\n    public int a = 0;\n    public int b = 1;\n    public void test01() {}\n    public void test02() {}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240318034830-qhmdrnb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318034830-qhmdrnb","updated":"20240318034848"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class MyClass {\n    public int a = 0;\n    public void test01() {}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240318034830-qt17opc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240318034830-qt17opc","updated":"20240318042856"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"ClassReader cr = new ClassReader(bytes);\nClassWriter cw = new ClassWriter(COMPUTE_FRAMES);\nClassVisitor cv = new ClassVisitor(ASM9, cw) {\n    @Override\n    public MethodVisitor visitMethod(int access, String name, String descriptor,\n                                     String signature, String[] exceptions) {\n        if (\"test02\".equals(name)) return null;\n        MethodVisitor method = super.visitMethod(access, name, descriptor, signature, exceptions);\n        if (\"\u003cinit\u003e\".equals(name)) return new MethodVisitor(api, method) {\n            boolean putA = false;\n            @Override\n            public void visitVarInsn(int opcode, int varIndex) {\n                if (!putA) {\n                    super.visitVarInsn(opcode, varIndex);\n                }\n            }\n            @Override\n            public void visitInsn(int opcode) {\n                if (!putA || opcode != ICONST_1)\n                    super.visitInsn(opcode);\n            }\n            @Override\n            public void visitFieldInsn(int opcode, String owner, String name, String descriptor) {\n                if (\"a\".equals(name)) {\n                    putA = true;\n                    super.visitFieldInsn(opcode, owner, name, descriptor);\n                }\n            }\n        };\n        return method;\n    }\n    @Override\n    public FieldVisitor visitField(int access, String name, String descriptor, String signature, Object value) {\n        if (\"b\".equals(name)) return null;\n        return super.visitField(access, name, descriptor, signature, value);\n    }\n};\ncr.accept(cv, ClassReader.SKIP_DEBUG);\nreturn cw.toByteArray();\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"Type":"NodeSuperBlockCloseMarker"}]},{"ID":"20240318041912-pt1timc","Type":"NodeParagraph","Properties":{"id":"20240318041912-pt1timc","updated":"20240318043049"},"Children":[{"Type":"NodeText","Data":"若要删除一个元素，在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"visit"},{"Type":"NodeText","Data":"​ 方法中返回 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"null"},{"Type":"NodeText","Data":"​ 即可。添加或修改则返回一个新的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MethodVisitor"},{"Type":"NodeText","Data":"​。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"visitCode"},{"Type":"NodeText","Data":"​ 表示"},{"Type":"NodeTextMark","TextMarkType":"inline-memo","TextMarkInlineMemoContent":"全部顺序：_esc_newline_[visitParameter] * n_esc_newline_[visitAnnotationDefault]_esc_newline_[visitAnnotation | visitParameterAnnotation | visitAttribute] * n_esc_newline_[visitCode]_esc_newline_[visitFrame | visitXInsn | visitLabel | visitInsnAnnotation | visitTryCatchBlock ...] * n_esc_newline_[visitMaxs]_esc_newline_[visitEnd]","TextMarkTextContent":"方法体中字节码的开始"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"visitMaxs"},{"Type":"NodeText","Data":"​ 表示方法体中字节码的结束，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"visitEnd"},{"Type":"NodeText","Data":"​ 为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MethodVisitor"},{"Type":"NodeText","Data":"​ 中所有事件的结束。"}]},{"ID":"20240318122009-ag7uem6","Type":"NodeParagraph","Properties":{"id":"20240318122009-ag7uem6","updated":"20240318122107"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"asm-commons"},{"Type":"NodeText","Data":"​ 包提供了一些便于方法修改的"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20240318043121-t301ixz","TextMarkBlockRefSubtype":"s","TextMarkTextContent":"工具类"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240318042421-cclvqad","Type":"NodeParagraph","Properties":{"id":"20240318042421-cclvqad","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20240318042629"},"Children":[{"Type":"NodeText","Data":"在修改方法后，我们可能需要重新计算操作数栈和局部变量表大小。除了使用 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"visitMaxs()"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 手动指定外，还可以在 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);"},"TextMarkType":"code","TextMarkTextContent":"ClassWriter"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);\"}"},{"Type":"NodeText","Data":"​ 构造函数中传入参数让 ASM 自动计算"}]},{"ID":"20240318042632-ewfp3k2","Type":"NodeTable","TableAligns":[0,0],"Properties":{"colgroup":"min-width: 60px;|min-width: 60px;","id":"20240318042632-ewfp3k2","updated":"20240318042833"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"flags"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"说明"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"0"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"不自动计算操作数和局部变量表大小"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"COMPUTE_MAXS"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"自动计算操作数栈和局部变量表大小，但需要调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"visitMaxs"},{"Type":"NodeText","Data":"​ 触发"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"COMPUTE_FRAMES"},{"Type":"NodeText","Data":"​"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"自动计算操作数栈、局部变量表、StackMapFrames 大小"}]}]}]}]}]},{"ID":"20240318042256-bn1szso","Type":"NodeParagraph","Properties":{"id":"20240318042256-bn1szso"}}]}